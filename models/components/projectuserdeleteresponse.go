// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ProjectUserDeleteResponseObject string

const (
	ProjectUserDeleteResponseObjectOrganizationProjectUserDeleted ProjectUserDeleteResponseObject = "organization.project.user.deleted"
)

func (e ProjectUserDeleteResponseObject) ToPointer() *ProjectUserDeleteResponseObject {
	return &e
}
func (e *ProjectUserDeleteResponseObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization.project.user.deleted":
		*e = ProjectUserDeleteResponseObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectUserDeleteResponseObject: %v", v)
	}
}

type ProjectUserDeleteResponse struct {
	Object  ProjectUserDeleteResponseObject `json:"object"`
	ID      string                          `json:"id"`
	Deleted bool                            `json:"deleted"`
}

func (o *ProjectUserDeleteResponse) GetObject() ProjectUserDeleteResponseObject {
	if o == nil {
		return ProjectUserDeleteResponseObject("")
	}
	return o.Object
}

func (o *ProjectUserDeleteResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectUserDeleteResponse) GetDeleted() bool {
	if o == nil {
		return false
	}
	return o.Deleted
}
