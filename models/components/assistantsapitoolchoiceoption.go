// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// AssistantsAPIToolChoiceOption1 - `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
type AssistantsAPIToolChoiceOption1 string

const (
	AssistantsAPIToolChoiceOption1None     AssistantsAPIToolChoiceOption1 = "none"
	AssistantsAPIToolChoiceOption1Auto     AssistantsAPIToolChoiceOption1 = "auto"
	AssistantsAPIToolChoiceOption1Required AssistantsAPIToolChoiceOption1 = "required"
)

func (e AssistantsAPIToolChoiceOption1) ToPointer() *AssistantsAPIToolChoiceOption1 {
	return &e
}
func (e *AssistantsAPIToolChoiceOption1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		fallthrough
	case "required":
		*e = AssistantsAPIToolChoiceOption1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantsAPIToolChoiceOption1: %v", v)
	}
}

type AssistantsAPIToolChoiceOptionType string

const (
	AssistantsAPIToolChoiceOptionTypeAssistantsAPIToolChoiceOption1 AssistantsAPIToolChoiceOptionType = "AssistantsApiToolChoiceOption_1"
	AssistantsAPIToolChoiceOptionTypeAssistantsNamedToolChoice      AssistantsAPIToolChoiceOptionType = "AssistantsNamedToolChoice"
)

// AssistantsAPIToolChoiceOption - Controls which (if any) tool is called by the model.
// `none` means the model will not call any tools and instead generates a message.
// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
// `required` means the model must call one or more tools before responding to the user.
// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
type AssistantsAPIToolChoiceOption struct {
	AssistantsAPIToolChoiceOption1 *AssistantsAPIToolChoiceOption1
	AssistantsNamedToolChoice      *AssistantsNamedToolChoice

	Type AssistantsAPIToolChoiceOptionType
}

func CreateAssistantsAPIToolChoiceOptionAssistantsAPIToolChoiceOption1(assistantsAPIToolChoiceOption1 AssistantsAPIToolChoiceOption1) AssistantsAPIToolChoiceOption {
	typ := AssistantsAPIToolChoiceOptionTypeAssistantsAPIToolChoiceOption1

	return AssistantsAPIToolChoiceOption{
		AssistantsAPIToolChoiceOption1: &assistantsAPIToolChoiceOption1,
		Type:                           typ,
	}
}

func CreateAssistantsAPIToolChoiceOptionAssistantsNamedToolChoice(assistantsNamedToolChoice AssistantsNamedToolChoice) AssistantsAPIToolChoiceOption {
	typ := AssistantsAPIToolChoiceOptionTypeAssistantsNamedToolChoice

	return AssistantsAPIToolChoiceOption{
		AssistantsNamedToolChoice: &assistantsNamedToolChoice,
		Type:                      typ,
	}
}

func (u *AssistantsAPIToolChoiceOption) UnmarshalJSON(data []byte) error {

	var assistantsNamedToolChoice AssistantsNamedToolChoice = AssistantsNamedToolChoice{}
	if err := utils.UnmarshalJSON(data, &assistantsNamedToolChoice, "", true, true); err == nil {
		u.AssistantsNamedToolChoice = &assistantsNamedToolChoice
		u.Type = AssistantsAPIToolChoiceOptionTypeAssistantsNamedToolChoice
		return nil
	}

	var assistantsAPIToolChoiceOption1 AssistantsAPIToolChoiceOption1 = AssistantsAPIToolChoiceOption1("")
	if err := utils.UnmarshalJSON(data, &assistantsAPIToolChoiceOption1, "", true, true); err == nil {
		u.AssistantsAPIToolChoiceOption1 = &assistantsAPIToolChoiceOption1
		u.Type = AssistantsAPIToolChoiceOptionTypeAssistantsAPIToolChoiceOption1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AssistantsAPIToolChoiceOption", string(data))
}

func (u AssistantsAPIToolChoiceOption) MarshalJSON() ([]byte, error) {
	if u.AssistantsAPIToolChoiceOption1 != nil {
		return utils.MarshalJSON(u.AssistantsAPIToolChoiceOption1, "", true)
	}

	if u.AssistantsNamedToolChoice != nil {
		return utils.MarshalJSON(u.AssistantsNamedToolChoice, "", true)
	}

	return nil, errors.New("could not marshal union type AssistantsAPIToolChoiceOption: all fields are null")
}
