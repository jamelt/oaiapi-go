// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// InviteObject - The object type, which is always `organization.invite`
type InviteObject string

const (
	InviteObjectOrganizationInvite InviteObject = "organization.invite"
)

func (e InviteObject) ToPointer() *InviteObject {
	return &e
}
func (e *InviteObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization.invite":
		*e = InviteObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteObject: %v", v)
	}
}

// InviteRole - `owner` or `reader`
type InviteRole string

const (
	InviteRoleOwner  InviteRole = "owner"
	InviteRoleReader InviteRole = "reader"
)

func (e InviteRole) ToPointer() *InviteRole {
	return &e
}
func (e *InviteRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		fallthrough
	case "reader":
		*e = InviteRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteRole: %v", v)
	}
}

// InviteStatus - `accepted`,`expired`, or `pending`
type InviteStatus string

const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

func (e InviteStatus) ToPointer() *InviteStatus {
	return &e
}
func (e *InviteStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "expired":
		fallthrough
	case "pending":
		*e = InviteStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteStatus: %v", v)
	}
}

// Invite - Represents an individual `invite` to the organization.
type Invite struct {
	// The object type, which is always `organization.invite`
	Object InviteObject `json:"object"`
	// The identifier, which can be referenced in API endpoints
	ID string `json:"id"`
	// The email address of the individual to whom the invite was sent
	Email string `json:"email"`
	// `owner` or `reader`
	Role InviteRole `json:"role"`
	// `accepted`,`expired`, or `pending`
	Status InviteStatus `json:"status"`
	// The Unix timestamp (in seconds) of when the invite was sent.
	InvitedAt int64 `json:"invited_at"`
	// The Unix timestamp (in seconds) of when the invite expires.
	ExpiresAt int64 `json:"expires_at"`
	// The Unix timestamp (in seconds) of when the invite was accepted.
	AcceptedAt *int64 `json:"accepted_at,omitempty"`
}

func (o *Invite) GetObject() InviteObject {
	if o == nil {
		return InviteObject("")
	}
	return o.Object
}

func (o *Invite) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Invite) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Invite) GetRole() InviteRole {
	if o == nil {
		return InviteRole("")
	}
	return o.Role
}

func (o *Invite) GetStatus() InviteStatus {
	if o == nil {
		return InviteStatus("")
	}
	return o.Status
}

func (o *Invite) GetInvitedAt() int64 {
	if o == nil {
		return 0
	}
	return o.InvitedAt
}

func (o *Invite) GetExpiresAt() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresAt
}

func (o *Invite) GetAcceptedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.AcceptedAt
}
