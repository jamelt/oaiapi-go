// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// CreateModerationRequest3Type - Always `text`.
type CreateModerationRequest3Type string

const (
	CreateModerationRequest3TypeText CreateModerationRequest3Type = "text"
)

func (e CreateModerationRequest3Type) ToPointer() *CreateModerationRequest3Type {
	return &e
}
func (e *CreateModerationRequest3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = CreateModerationRequest3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateModerationRequest3Type: %v", v)
	}
}

// Three2 - An object describing text to classify.
type Three2 struct {
	// Always `text`.
	Type CreateModerationRequest3Type `json:"type"`
	// A string of text to classify.
	Text string `json:"text"`
}

func (o *Three2) GetType() CreateModerationRequest3Type {
	if o == nil {
		return CreateModerationRequest3Type("")
	}
	return o.Type
}

func (o *Three2) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

// ThreeType - Always `image_url`.
type ThreeType string

const (
	ThreeTypeImageURL ThreeType = "image_url"
)

func (e ThreeType) ToPointer() *ThreeType {
	return &e
}
func (e *ThreeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image_url":
		*e = ThreeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreeType: %v", v)
	}
}

// ThreeImageURL - Contains either an image URL or a data URL for a base64 encoded image.
type ThreeImageURL struct {
	// Either a URL of the image or the base64 encoded image data.
	URL string `json:"url"`
}

func (o *ThreeImageURL) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// Three1 - An object describing an image to classify.
type Three1 struct {
	// Always `image_url`.
	Type ThreeType `json:"type"`
	// Contains either an image URL or a data URL for a base64 encoded image.
	ImageURL ThreeImageURL `json:"image_url"`
}

func (o *Three1) GetType() ThreeType {
	if o == nil {
		return ThreeType("")
	}
	return o.Type
}

func (o *Three1) GetImageURL() ThreeImageURL {
	if o == nil {
		return ThreeImageURL{}
	}
	return o.ImageURL
}

type ThreeUnionType string

const (
	ThreeUnionTypeThree1 ThreeUnionType = "3_1"
	ThreeUnionTypeThree2 ThreeUnionType = "3_2"
)

type Three struct {
	Three1 *Three1
	Three2 *Three2

	Type ThreeUnionType
}

func CreateThreeThree1(three1 Three1) Three {
	typ := ThreeUnionTypeThree1

	return Three{
		Three1: &three1,
		Type:   typ,
	}
}

func CreateThreeThree2(three2 Three2) Three {
	typ := ThreeUnionTypeThree2

	return Three{
		Three2: &three2,
		Type:   typ,
	}
}

func (u *Three) UnmarshalJSON(data []byte) error {

	var three1 Three1 = Three1{}
	if err := utils.UnmarshalJSON(data, &three1, "", true, true); err == nil {
		u.Three1 = &three1
		u.Type = ThreeUnionTypeThree1
		return nil
	}

	var three2 Three2 = Three2{}
	if err := utils.UnmarshalJSON(data, &three2, "", true, true); err == nil {
		u.Three2 = &three2
		u.Type = ThreeUnionTypeThree2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Three", string(data))
}

func (u Three) MarshalJSON() ([]byte, error) {
	if u.Three1 != nil {
		return utils.MarshalJSON(u.Three1, "", true)
	}

	if u.Three2 != nil {
		return utils.MarshalJSON(u.Three2, "", true)
	}

	return nil, errors.New("could not marshal union type Three: all fields are null")
}

type CreateModerationRequestInputType string

const (
	CreateModerationRequestInputTypeStr        CreateModerationRequestInputType = "str"
	CreateModerationRequestInputTypeArrayOfStr CreateModerationRequestInputType = "arrayOfStr"
	CreateModerationRequestInputTypeArrayOf3   CreateModerationRequestInputType = "arrayOf3"
)

// CreateModerationRequestInput - Input (or inputs) to classify. Can be a single string, an array of strings, or
// an array of multi-modal input objects similar to other models.
type CreateModerationRequestInput struct {
	Str        *string
	ArrayOfStr []string
	ArrayOf3   []Three

	Type CreateModerationRequestInputType
}

func CreateCreateModerationRequestInputStr(str string) CreateModerationRequestInput {
	typ := CreateModerationRequestInputTypeStr

	return CreateModerationRequestInput{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateModerationRequestInputArrayOfStr(arrayOfStr []string) CreateModerationRequestInput {
	typ := CreateModerationRequestInputTypeArrayOfStr

	return CreateModerationRequestInput{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateCreateModerationRequestInputArrayOf3(arrayOf3 []Three) CreateModerationRequestInput {
	typ := CreateModerationRequestInputTypeArrayOf3

	return CreateModerationRequestInput{
		ArrayOf3: arrayOf3,
		Type:     typ,
	}
}

func (u *CreateModerationRequestInput) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateModerationRequestInputTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateModerationRequestInputTypeArrayOfStr
		return nil
	}

	var arrayOf3 []Three = []Three{}
	if err := utils.UnmarshalJSON(data, &arrayOf3, "", true, true); err == nil {
		u.ArrayOf3 = arrayOf3
		u.Type = CreateModerationRequestInputTypeArrayOf3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateModerationRequestInput", string(data))
}

func (u CreateModerationRequestInput) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOf3 != nil {
		return utils.MarshalJSON(u.ArrayOf3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateModerationRequestInput: all fields are null")
}

type CreateModerationRequestModel2 string

const (
	CreateModerationRequestModel2OmniModerationLatest   CreateModerationRequestModel2 = "omni-moderation-latest"
	CreateModerationRequestModel2OmniModeration20240926 CreateModerationRequestModel2 = "omni-moderation-2024-09-26"
	CreateModerationRequestModel2TextModerationLatest   CreateModerationRequestModel2 = "text-moderation-latest"
	CreateModerationRequestModel2TextModerationStable   CreateModerationRequestModel2 = "text-moderation-stable"
)

func (e CreateModerationRequestModel2) ToPointer() *CreateModerationRequestModel2 {
	return &e
}
func (e *CreateModerationRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "omni-moderation-latest":
		fallthrough
	case "omni-moderation-2024-09-26":
		fallthrough
	case "text-moderation-latest":
		fallthrough
	case "text-moderation-stable":
		*e = CreateModerationRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateModerationRequestModel2: %v", v)
	}
}

type CreateModerationRequestModelType string

const (
	CreateModerationRequestModelTypeStr                           CreateModerationRequestModelType = "str"
	CreateModerationRequestModelTypeCreateModerationRequestModel2 CreateModerationRequestModelType = "CreateModerationRequest_model_2"
)

// CreateModerationRequestModel - The content moderation model you would like to use. Learn more in
// [the moderation guide](/docs/guides/moderation), and learn about
// available models [here](/docs/models#moderation).
type CreateModerationRequestModel struct {
	Str                           *string
	CreateModerationRequestModel2 *CreateModerationRequestModel2

	Type CreateModerationRequestModelType
}

func CreateCreateModerationRequestModelStr(str string) CreateModerationRequestModel {
	typ := CreateModerationRequestModelTypeStr

	return CreateModerationRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateModerationRequestModelCreateModerationRequestModel2(createModerationRequestModel2 CreateModerationRequestModel2) CreateModerationRequestModel {
	typ := CreateModerationRequestModelTypeCreateModerationRequestModel2

	return CreateModerationRequestModel{
		CreateModerationRequestModel2: &createModerationRequestModel2,
		Type:                          typ,
	}
}

func (u *CreateModerationRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateModerationRequestModelTypeStr
		return nil
	}

	var createModerationRequestModel2 CreateModerationRequestModel2 = CreateModerationRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createModerationRequestModel2, "", true, true); err == nil {
		u.CreateModerationRequestModel2 = &createModerationRequestModel2
		u.Type = CreateModerationRequestModelTypeCreateModerationRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateModerationRequestModel", string(data))
}

func (u CreateModerationRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateModerationRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateModerationRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateModerationRequestModel: all fields are null")
}

type CreateModerationRequest struct {
	// Input (or inputs) to classify. Can be a single string, an array of strings, or
	// an array of multi-modal input objects similar to other models.
	//
	Input CreateModerationRequestInput `json:"input"`
	// The content moderation model you would like to use. Learn more in
	// [the moderation guide](/docs/guides/moderation), and learn about
	// available models [here](/docs/models#moderation).
	//
	Model *CreateModerationRequestModel `json:"model,omitempty"`
}

func (o *CreateModerationRequest) GetInput() CreateModerationRequestInput {
	if o == nil {
		return CreateModerationRequestInput{}
	}
	return o.Input
}

func (o *CreateModerationRequest) GetModel() *CreateModerationRequestModel {
	if o == nil {
		return nil
	}
	return o.Model
}
