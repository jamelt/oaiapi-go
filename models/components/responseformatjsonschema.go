// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// ResponseFormatJSONSchemaType - The type of response format being defined: `json_schema`
type ResponseFormatJSONSchemaType string

const (
	ResponseFormatJSONSchemaTypeJSONSchema ResponseFormatJSONSchemaType = "json_schema"
)

func (e ResponseFormatJSONSchemaType) ToPointer() *ResponseFormatJSONSchemaType {
	return &e
}
func (e *ResponseFormatJSONSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json_schema":
		*e = ResponseFormatJSONSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseFormatJSONSchemaType: %v", v)
	}
}

type JSONSchema struct {
	// A description of what the response format is for, used by the model to determine how to respond in the format.
	Description *string `json:"description,omitempty"`
	// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The schema for the response format, described as a JSON Schema object.
	Schema map[string]any `json:"schema,omitempty"`
	// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
	Strict *bool `default:"false" json:"strict"`
}

func (j JSONSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JSONSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *JSONSchema) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *JSONSchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *JSONSchema) GetSchema() map[string]any {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *JSONSchema) GetStrict() *bool {
	if o == nil {
		return nil
	}
	return o.Strict
}

type ResponseFormatJSONSchema struct {
	// The type of response format being defined: `json_schema`
	Type       ResponseFormatJSONSchemaType `json:"type"`
	JSONSchema JSONSchema                   `json:"json_schema"`
}

func (o *ResponseFormatJSONSchema) GetType() ResponseFormatJSONSchemaType {
	if o == nil {
		return ResponseFormatJSONSchemaType("")
	}
	return o.Type
}

func (o *ResponseFormatJSONSchema) GetJSONSchema() JSONSchema {
	if o == nil {
		return JSONSchema{}
	}
	return o.JSONSchema
}
