// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RunStepDetailsToolCallsCodeOutputImageObjectType - Always `image`.
type RunStepDetailsToolCallsCodeOutputImageObjectType string

const (
	RunStepDetailsToolCallsCodeOutputImageObjectTypeImage RunStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

func (e RunStepDetailsToolCallsCodeOutputImageObjectType) ToPointer() *RunStepDetailsToolCallsCodeOutputImageObjectType {
	return &e
}
func (e *RunStepDetailsToolCallsCodeOutputImageObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image":
		*e = RunStepDetailsToolCallsCodeOutputImageObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsCodeOutputImageObjectType: %v", v)
	}
}

type RunStepDetailsToolCallsCodeOutputImageObjectImage struct {
	// The [file](/docs/api-reference/files) ID of the image.
	FileID string `json:"file_id"`
}

func (o *RunStepDetailsToolCallsCodeOutputImageObjectImage) GetFileID() string {
	if o == nil {
		return ""
	}
	return o.FileID
}

type RunStepDetailsToolCallsCodeOutputImageObject struct {
	// Always `image`.
	Type  RunStepDetailsToolCallsCodeOutputImageObjectType  `json:"type"`
	Image RunStepDetailsToolCallsCodeOutputImageObjectImage `json:"image"`
}

func (o *RunStepDetailsToolCallsCodeOutputImageObject) GetType() RunStepDetailsToolCallsCodeOutputImageObjectType {
	if o == nil {
		return RunStepDetailsToolCallsCodeOutputImageObjectType("")
	}
	return o.Type
}

func (o *RunStepDetailsToolCallsCodeOutputImageObject) GetImage() RunStepDetailsToolCallsCodeOutputImageObjectImage {
	if o == nil {
		return RunStepDetailsToolCallsCodeOutputImageObjectImage{}
	}
	return o.Image
}
