// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type ChunkingStrategyRequestParamType string

const (
	ChunkingStrategyRequestParamTypeAutoChunkingStrategyRequestParam   ChunkingStrategyRequestParamType = "AutoChunkingStrategyRequestParam"
	ChunkingStrategyRequestParamTypeStaticChunkingStrategyRequestParam ChunkingStrategyRequestParamType = "StaticChunkingStrategyRequestParam"
)

// ChunkingStrategyRequestParam - The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
type ChunkingStrategyRequestParam struct {
	AutoChunkingStrategyRequestParam   *AutoChunkingStrategyRequestParam
	StaticChunkingStrategyRequestParam *StaticChunkingStrategyRequestParam

	Type ChunkingStrategyRequestParamType
}

func CreateChunkingStrategyRequestParamAutoChunkingStrategyRequestParam(autoChunkingStrategyRequestParam AutoChunkingStrategyRequestParam) ChunkingStrategyRequestParam {
	typ := ChunkingStrategyRequestParamTypeAutoChunkingStrategyRequestParam

	return ChunkingStrategyRequestParam{
		AutoChunkingStrategyRequestParam: &autoChunkingStrategyRequestParam,
		Type:                             typ,
	}
}

func CreateChunkingStrategyRequestParamStaticChunkingStrategyRequestParam(staticChunkingStrategyRequestParam StaticChunkingStrategyRequestParam) ChunkingStrategyRequestParam {
	typ := ChunkingStrategyRequestParamTypeStaticChunkingStrategyRequestParam

	return ChunkingStrategyRequestParam{
		StaticChunkingStrategyRequestParam: &staticChunkingStrategyRequestParam,
		Type:                               typ,
	}
}

func (u *ChunkingStrategyRequestParam) UnmarshalJSON(data []byte) error {

	var autoChunkingStrategyRequestParam AutoChunkingStrategyRequestParam = AutoChunkingStrategyRequestParam{}
	if err := utils.UnmarshalJSON(data, &autoChunkingStrategyRequestParam, "", true, true); err == nil {
		u.AutoChunkingStrategyRequestParam = &autoChunkingStrategyRequestParam
		u.Type = ChunkingStrategyRequestParamTypeAutoChunkingStrategyRequestParam
		return nil
	}

	var staticChunkingStrategyRequestParam StaticChunkingStrategyRequestParam = StaticChunkingStrategyRequestParam{}
	if err := utils.UnmarshalJSON(data, &staticChunkingStrategyRequestParam, "", true, true); err == nil {
		u.StaticChunkingStrategyRequestParam = &staticChunkingStrategyRequestParam
		u.Type = ChunkingStrategyRequestParamTypeStaticChunkingStrategyRequestParam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChunkingStrategyRequestParam", string(data))
}

func (u ChunkingStrategyRequestParam) MarshalJSON() ([]byte, error) {
	if u.AutoChunkingStrategyRequestParam != nil {
		return utils.MarshalJSON(u.AutoChunkingStrategyRequestParam, "", true)
	}

	if u.StaticChunkingStrategyRequestParam != nil {
		return utils.MarshalJSON(u.StaticChunkingStrategyRequestParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChunkingStrategyRequestParam: all fields are null")
}
