// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AuditLogActorType - The type of actor. Is either `session` or `api_key`.
type AuditLogActorType string

const (
	AuditLogActorTypeSession AuditLogActorType = "session"
	AuditLogActorTypeAPIKey  AuditLogActorType = "api_key"
)

func (e AuditLogActorType) ToPointer() *AuditLogActorType {
	return &e
}
func (e *AuditLogActorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "session":
		fallthrough
	case "api_key":
		*e = AuditLogActorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuditLogActorType: %v", v)
	}
}

// AuditLogActor - The actor who performed the audit logged action.
type AuditLogActor struct {
	// The type of actor. Is either `session` or `api_key`.
	Type *AuditLogActorType `json:"type,omitempty"`
	// The session in which the audit logged action was performed.
	Session *AuditLogActorSession `json:"session,omitempty"`
	// The API Key used to perform the audit logged action.
	APIKey *AuditLogActorAPIKey `json:"api_key,omitempty"`
}

func (o *AuditLogActor) GetType() *AuditLogActorType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AuditLogActor) GetSession() *AuditLogActorSession {
	if o == nil {
		return nil
	}
	return o.Session
}

func (o *AuditLogActor) GetAPIKey() *AuditLogActorAPIKey {
	if o == nil {
		return nil
	}
	return o.APIKey
}
