// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type File struct {
	FileName string `multipartForm:"name=file"`
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	Content any `multipartForm:"content"`
}

func (o *File) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *File) GetContent() any {
	if o == nil {
		return nil
	}
	return o.Content
}

type CreateTranscriptionRequestModel2 string

const (
	CreateTranscriptionRequestModel2Whisper1 CreateTranscriptionRequestModel2 = "whisper-1"
)

func (e CreateTranscriptionRequestModel2) ToPointer() *CreateTranscriptionRequestModel2 {
	return &e
}
func (e *CreateTranscriptionRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "whisper-1":
		*e = CreateTranscriptionRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTranscriptionRequestModel2: %v", v)
	}
}

type CreateTranscriptionRequestModelType string

const (
	CreateTranscriptionRequestModelTypeStr                              CreateTranscriptionRequestModelType = "str"
	CreateTranscriptionRequestModelTypeCreateTranscriptionRequestModel2 CreateTranscriptionRequestModelType = "CreateTranscriptionRequest_model_2"
)

// CreateTranscriptionRequestModel - ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
type CreateTranscriptionRequestModel struct {
	Str                              *string
	CreateTranscriptionRequestModel2 *CreateTranscriptionRequestModel2

	Type CreateTranscriptionRequestModelType
}

func CreateCreateTranscriptionRequestModelStr(str string) CreateTranscriptionRequestModel {
	typ := CreateTranscriptionRequestModelTypeStr

	return CreateTranscriptionRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateTranscriptionRequestModelCreateTranscriptionRequestModel2(createTranscriptionRequestModel2 CreateTranscriptionRequestModel2) CreateTranscriptionRequestModel {
	typ := CreateTranscriptionRequestModelTypeCreateTranscriptionRequestModel2

	return CreateTranscriptionRequestModel{
		CreateTranscriptionRequestModel2: &createTranscriptionRequestModel2,
		Type:                             typ,
	}
}

func (u *CreateTranscriptionRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateTranscriptionRequestModelTypeStr
		return nil
	}

	var createTranscriptionRequestModel2 CreateTranscriptionRequestModel2 = CreateTranscriptionRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createTranscriptionRequestModel2, "", true, true); err == nil {
		u.CreateTranscriptionRequestModel2 = &createTranscriptionRequestModel2
		u.Type = CreateTranscriptionRequestModelTypeCreateTranscriptionRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateTranscriptionRequestModel", string(data))
}

func (u CreateTranscriptionRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateTranscriptionRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateTranscriptionRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateTranscriptionRequestModel: all fields are null")
}

type TimestampGranularities string

const (
	TimestampGranularitiesWord    TimestampGranularities = "word"
	TimestampGranularitiesSegment TimestampGranularities = "segment"
)

func (e TimestampGranularities) ToPointer() *TimestampGranularities {
	return &e
}
func (e *TimestampGranularities) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "word":
		fallthrough
	case "segment":
		*e = TimestampGranularities(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimestampGranularities: %v", v)
	}
}

type CreateTranscriptionRequest struct {
	// The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
	//
	File File `multipartForm:"file"`
	// ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
	//
	Model CreateTranscriptionRequestModel `multipartForm:"name=model"`
	// The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	//
	Language *string `multipartForm:"name=language"`
	// An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.
	//
	Prompt *string `multipartForm:"name=prompt"`
	// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
	//
	ResponseFormat *AudioResponseFormat `default:"json" multipartForm:"name=response_format"`
	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	//
	Temperature *float64 `default:"0" multipartForm:"name=temperature"`
	// The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
	//
	TimestampGranularities []TimestampGranularities `multipartForm:"name=timestamp_granularities[]"`
}

func (c CreateTranscriptionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTranscriptionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTranscriptionRequest) GetFile() File {
	if o == nil {
		return File{}
	}
	return o.File
}

func (o *CreateTranscriptionRequest) GetModel() CreateTranscriptionRequestModel {
	if o == nil {
		return CreateTranscriptionRequestModel{}
	}
	return o.Model
}

func (o *CreateTranscriptionRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *CreateTranscriptionRequest) GetPrompt() *string {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *CreateTranscriptionRequest) GetResponseFormat() *AudioResponseFormat {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}

func (o *CreateTranscriptionRequest) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateTranscriptionRequest) GetTimestampGranularities() []TimestampGranularities {
	if o == nil {
		return nil
	}
	return o.TimestampGranularities
}
