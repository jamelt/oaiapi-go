// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// RunStepDetailsToolCallsObjectType - Always `tool_calls`.
type RunStepDetailsToolCallsObjectType string

const (
	RunStepDetailsToolCallsObjectTypeToolCalls RunStepDetailsToolCallsObjectType = "tool_calls"
)

func (e RunStepDetailsToolCallsObjectType) ToPointer() *RunStepDetailsToolCallsObjectType {
	return &e
}
func (e *RunStepDetailsToolCallsObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tool_calls":
		*e = RunStepDetailsToolCallsObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsObjectType: %v", v)
	}
}

type ToolCallsType string

const (
	ToolCallsTypeRunStepDetailsToolCallsCodeObject       ToolCallsType = "RunStepDetailsToolCallsCodeObject"
	ToolCallsTypeRunStepDetailsToolCallsFileSearchObject ToolCallsType = "RunStepDetailsToolCallsFileSearchObject"
	ToolCallsTypeRunStepDetailsToolCallsFunctionObject   ToolCallsType = "RunStepDetailsToolCallsFunctionObject"
)

type ToolCalls struct {
	RunStepDetailsToolCallsCodeObject       *RunStepDetailsToolCallsCodeObject
	RunStepDetailsToolCallsFileSearchObject *RunStepDetailsToolCallsFileSearchObject
	RunStepDetailsToolCallsFunctionObject   *RunStepDetailsToolCallsFunctionObject

	Type ToolCallsType
}

func CreateToolCallsRunStepDetailsToolCallsCodeObject(runStepDetailsToolCallsCodeObject RunStepDetailsToolCallsCodeObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsCodeObject

	return ToolCalls{
		RunStepDetailsToolCallsCodeObject: &runStepDetailsToolCallsCodeObject,
		Type:                              typ,
	}
}

func CreateToolCallsRunStepDetailsToolCallsFileSearchObject(runStepDetailsToolCallsFileSearchObject RunStepDetailsToolCallsFileSearchObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsFileSearchObject

	return ToolCalls{
		RunStepDetailsToolCallsFileSearchObject: &runStepDetailsToolCallsFileSearchObject,
		Type:                                    typ,
	}
}

func CreateToolCallsRunStepDetailsToolCallsFunctionObject(runStepDetailsToolCallsFunctionObject RunStepDetailsToolCallsFunctionObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsFunctionObject

	return ToolCalls{
		RunStepDetailsToolCallsFunctionObject: &runStepDetailsToolCallsFunctionObject,
		Type:                                  typ,
	}
}

func (u *ToolCalls) UnmarshalJSON(data []byte) error {

	var runStepDetailsToolCallsCodeObject RunStepDetailsToolCallsCodeObject = RunStepDetailsToolCallsCodeObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsCodeObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsCodeObject = &runStepDetailsToolCallsCodeObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsCodeObject
		return nil
	}

	var runStepDetailsToolCallsFileSearchObject RunStepDetailsToolCallsFileSearchObject = RunStepDetailsToolCallsFileSearchObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsFileSearchObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsFileSearchObject = &runStepDetailsToolCallsFileSearchObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsFileSearchObject
		return nil
	}

	var runStepDetailsToolCallsFunctionObject RunStepDetailsToolCallsFunctionObject = RunStepDetailsToolCallsFunctionObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsFunctionObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsFunctionObject = &runStepDetailsToolCallsFunctionObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsFunctionObject
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ToolCalls", string(data))
}

func (u ToolCalls) MarshalJSON() ([]byte, error) {
	if u.RunStepDetailsToolCallsCodeObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsCodeObject, "", true)
	}

	if u.RunStepDetailsToolCallsFileSearchObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsFileSearchObject, "", true)
	}

	if u.RunStepDetailsToolCallsFunctionObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsFunctionObject, "", true)
	}

	return nil, errors.New("could not marshal union type ToolCalls: all fields are null")
}

// RunStepDetailsToolCallsObject - Details of the tool call.
type RunStepDetailsToolCallsObject struct {
	// Always `tool_calls`.
	Type RunStepDetailsToolCallsObjectType `json:"type"`
	// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
	//
	ToolCalls []ToolCalls `json:"tool_calls"`
}

func (o *RunStepDetailsToolCallsObject) GetType() RunStepDetailsToolCallsObjectType {
	if o == nil {
		return RunStepDetailsToolCallsObjectType("")
	}
	return o.Type
}

func (o *RunStepDetailsToolCallsObject) GetToolCalls() []ToolCalls {
	if o == nil {
		return []ToolCalls{}
	}
	return o.ToolCalls
}
