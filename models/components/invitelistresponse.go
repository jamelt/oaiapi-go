// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// InviteListResponseObject - The object type, which is always `list`
type InviteListResponseObject string

const (
	InviteListResponseObjectList InviteListResponseObject = "list"
)

func (e InviteListResponseObject) ToPointer() *InviteListResponseObject {
	return &e
}
func (e *InviteListResponseObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		*e = InviteListResponseObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteListResponseObject: %v", v)
	}
}

type InviteListResponse struct {
	// The object type, which is always `list`
	Object InviteListResponseObject `json:"object"`
	Data   []Invite                 `json:"data"`
	// The first `invite_id` in the retrieved `list`
	FirstID *string `json:"first_id,omitempty"`
	// The last `invite_id` in the retrieved `list`
	LastID *string `json:"last_id,omitempty"`
	// The `has_more` property is used for pagination to indicate there are additional results.
	HasMore *bool `json:"has_more,omitempty"`
}

func (o *InviteListResponse) GetObject() InviteListResponseObject {
	if o == nil {
		return InviteListResponseObject("")
	}
	return o.Object
}

func (o *InviteListResponse) GetData() []Invite {
	if o == nil {
		return []Invite{}
	}
	return o.Data
}

func (o *InviteListResponse) GetFirstID() *string {
	if o == nil {
		return nil
	}
	return o.FirstID
}

func (o *InviteListResponse) GetLastID() *string {
	if o == nil {
		return nil
	}
	return o.LastID
}

func (o *InviteListResponse) GetHasMore() *bool {
	if o == nil {
		return nil
	}
	return o.HasMore
}
