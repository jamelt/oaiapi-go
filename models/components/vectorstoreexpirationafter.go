// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
type Anchor string

const (
	AnchorLastActiveAt Anchor = "last_active_at"
)

func (e Anchor) ToPointer() *Anchor {
	return &e
}
func (e *Anchor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_active_at":
		*e = Anchor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Anchor: %v", v)
	}
}

// VectorStoreExpirationAfter - The expiration policy for a vector store.
type VectorStoreExpirationAfter struct {
	// Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
	Anchor Anchor `json:"anchor"`
	// The number of days after the anchor time that the vector store will expire.
	Days int64 `json:"days"`
}

func (o *VectorStoreExpirationAfter) GetAnchor() Anchor {
	if o == nil {
		return Anchor("")
	}
	return o.Anchor
}

func (o *VectorStoreExpirationAfter) GetDays() int64 {
	if o == nil {
		return 0
	}
	return o.Days
}
