// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RunStepDetailsToolCallsFileSearchObjectType - The type of tool call. This is always going to be `file_search` for this type of tool call.
type RunStepDetailsToolCallsFileSearchObjectType string

const (
	RunStepDetailsToolCallsFileSearchObjectTypeFileSearch RunStepDetailsToolCallsFileSearchObjectType = "file_search"
)

func (e RunStepDetailsToolCallsFileSearchObjectType) ToPointer() *RunStepDetailsToolCallsFileSearchObjectType {
	return &e
}
func (e *RunStepDetailsToolCallsFileSearchObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "file_search":
		*e = RunStepDetailsToolCallsFileSearchObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsFileSearchObjectType: %v", v)
	}
}

// RunStepDetailsToolCallsFileSearchObjectFileSearch - For now, this is always going to be an empty object.
type RunStepDetailsToolCallsFileSearchObjectFileSearch struct {
	// The ranking options for the file search.
	RankingOptions *RunStepDetailsToolCallsFileSearchRankingOptionsObject `json:"ranking_options,omitempty"`
	// The results of the file search.
	Results []RunStepDetailsToolCallsFileSearchResultObject `json:"results,omitempty"`
}

func (o *RunStepDetailsToolCallsFileSearchObjectFileSearch) GetRankingOptions() *RunStepDetailsToolCallsFileSearchRankingOptionsObject {
	if o == nil {
		return nil
	}
	return o.RankingOptions
}

func (o *RunStepDetailsToolCallsFileSearchObjectFileSearch) GetResults() []RunStepDetailsToolCallsFileSearchResultObject {
	if o == nil {
		return nil
	}
	return o.Results
}

type RunStepDetailsToolCallsFileSearchObject struct {
	// The ID of the tool call object.
	ID string `json:"id"`
	// The type of tool call. This is always going to be `file_search` for this type of tool call.
	Type RunStepDetailsToolCallsFileSearchObjectType `json:"type"`
	// For now, this is always going to be an empty object.
	FileSearch RunStepDetailsToolCallsFileSearchObjectFileSearch `json:"file_search"`
}

func (o *RunStepDetailsToolCallsFileSearchObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunStepDetailsToolCallsFileSearchObject) GetType() RunStepDetailsToolCallsFileSearchObjectType {
	if o == nil {
		return RunStepDetailsToolCallsFileSearchObjectType("")
	}
	return o.Type
}

func (o *RunStepDetailsToolCallsFileSearchObject) GetFileSearch() RunStepDetailsToolCallsFileSearchObjectFileSearch {
	if o == nil {
		return RunStepDetailsToolCallsFileSearchObjectFileSearch{}
	}
	return o.FileSearch
}
