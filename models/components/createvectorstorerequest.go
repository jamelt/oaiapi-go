// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type ChunkingStrategyUnionType string

const (
	ChunkingStrategyUnionTypeAutoChunkingStrategyRequestParam   ChunkingStrategyUnionType = "AutoChunkingStrategyRequestParam"
	ChunkingStrategyUnionTypeStaticChunkingStrategyRequestParam ChunkingStrategyUnionType = "StaticChunkingStrategyRequestParam"
)

// ChunkingStrategy - The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
type ChunkingStrategy struct {
	AutoChunkingStrategyRequestParam   *AutoChunkingStrategyRequestParam
	StaticChunkingStrategyRequestParam *StaticChunkingStrategyRequestParam

	Type ChunkingStrategyUnionType
}

func CreateChunkingStrategyAutoChunkingStrategyRequestParam(autoChunkingStrategyRequestParam AutoChunkingStrategyRequestParam) ChunkingStrategy {
	typ := ChunkingStrategyUnionTypeAutoChunkingStrategyRequestParam

	return ChunkingStrategy{
		AutoChunkingStrategyRequestParam: &autoChunkingStrategyRequestParam,
		Type:                             typ,
	}
}

func CreateChunkingStrategyStaticChunkingStrategyRequestParam(staticChunkingStrategyRequestParam StaticChunkingStrategyRequestParam) ChunkingStrategy {
	typ := ChunkingStrategyUnionTypeStaticChunkingStrategyRequestParam

	return ChunkingStrategy{
		StaticChunkingStrategyRequestParam: &staticChunkingStrategyRequestParam,
		Type:                               typ,
	}
}

func (u *ChunkingStrategy) UnmarshalJSON(data []byte) error {

	var autoChunkingStrategyRequestParam AutoChunkingStrategyRequestParam = AutoChunkingStrategyRequestParam{}
	if err := utils.UnmarshalJSON(data, &autoChunkingStrategyRequestParam, "", true, true); err == nil {
		u.AutoChunkingStrategyRequestParam = &autoChunkingStrategyRequestParam
		u.Type = ChunkingStrategyUnionTypeAutoChunkingStrategyRequestParam
		return nil
	}

	var staticChunkingStrategyRequestParam StaticChunkingStrategyRequestParam = StaticChunkingStrategyRequestParam{}
	if err := utils.UnmarshalJSON(data, &staticChunkingStrategyRequestParam, "", true, true); err == nil {
		u.StaticChunkingStrategyRequestParam = &staticChunkingStrategyRequestParam
		u.Type = ChunkingStrategyUnionTypeStaticChunkingStrategyRequestParam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChunkingStrategy", string(data))
}

func (u ChunkingStrategy) MarshalJSON() ([]byte, error) {
	if u.AutoChunkingStrategyRequestParam != nil {
		return utils.MarshalJSON(u.AutoChunkingStrategyRequestParam, "", true)
	}

	if u.StaticChunkingStrategyRequestParam != nil {
		return utils.MarshalJSON(u.StaticChunkingStrategyRequestParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChunkingStrategy: all fields are null")
}

// CreateVectorStoreRequestMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type CreateVectorStoreRequestMetadata struct {
}

type CreateVectorStoreRequest struct {
	// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
	FileIds []string `json:"file_ids,omitempty"`
	// The name of the vector store.
	Name *string `json:"name,omitempty"`
	// The expiration policy for a vector store.
	ExpiresAfter *VectorStoreExpirationAfter `json:"expires_after,omitempty"`
	// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
	ChunkingStrategy *ChunkingStrategy `json:"chunking_strategy,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *CreateVectorStoreRequestMetadata `json:"metadata,omitempty"`
}

func (o *CreateVectorStoreRequest) GetFileIds() []string {
	if o == nil {
		return nil
	}
	return o.FileIds
}

func (o *CreateVectorStoreRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateVectorStoreRequest) GetExpiresAfter() *VectorStoreExpirationAfter {
	if o == nil {
		return nil
	}
	return o.ExpiresAfter
}

func (o *CreateVectorStoreRequest) GetChunkingStrategy() *ChunkingStrategy {
	if o == nil {
		return nil
	}
	return o.ChunkingStrategy
}

func (o *CreateVectorStoreRequest) GetMetadata() *CreateVectorStoreRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}
