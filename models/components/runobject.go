// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// RunObjectObject - The object type, which is always `thread.run`.
type RunObjectObject string

const (
	RunObjectObjectThreadRun RunObjectObject = "thread.run"
)

func (e RunObjectObject) ToPointer() *RunObjectObject {
	return &e
}
func (e *RunObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "thread.run":
		*e = RunObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectObject: %v", v)
	}
}

// RunObjectStatus - The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
type RunObjectStatus string

const (
	RunObjectStatusQueued         RunObjectStatus = "queued"
	RunObjectStatusInProgress     RunObjectStatus = "in_progress"
	RunObjectStatusRequiresAction RunObjectStatus = "requires_action"
	RunObjectStatusCancelling     RunObjectStatus = "cancelling"
	RunObjectStatusCancelled      RunObjectStatus = "cancelled"
	RunObjectStatusFailed         RunObjectStatus = "failed"
	RunObjectStatusCompleted      RunObjectStatus = "completed"
	RunObjectStatusIncomplete     RunObjectStatus = "incomplete"
	RunObjectStatusExpired        RunObjectStatus = "expired"
)

func (e RunObjectStatus) ToPointer() *RunObjectStatus {
	return &e
}
func (e *RunObjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "requires_action":
		fallthrough
	case "cancelling":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "completed":
		fallthrough
	case "incomplete":
		fallthrough
	case "expired":
		*e = RunObjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectStatus: %v", v)
	}
}

// RunObjectType - For now, this is always `submit_tool_outputs`.
type RunObjectType string

const (
	RunObjectTypeSubmitToolOutputs RunObjectType = "submit_tool_outputs"
)

func (e RunObjectType) ToPointer() *RunObjectType {
	return &e
}
func (e *RunObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submit_tool_outputs":
		*e = RunObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectType: %v", v)
	}
}

// SubmitToolOutputs - Details on the tool outputs needed for this run to continue.
type SubmitToolOutputs struct {
	// A list of the relevant tool calls.
	ToolCalls []RunToolCallObject `json:"tool_calls"`
}

func (o *SubmitToolOutputs) GetToolCalls() []RunToolCallObject {
	if o == nil {
		return []RunToolCallObject{}
	}
	return o.ToolCalls
}

// RequiredAction - Details on the action required to continue the run. Will be `null` if no action is required.
type RequiredAction struct {
	// For now, this is always `submit_tool_outputs`.
	Type RunObjectType `json:"type"`
	// Details on the tool outputs needed for this run to continue.
	SubmitToolOutputs SubmitToolOutputs `json:"submit_tool_outputs"`
}

func (o *RequiredAction) GetType() RunObjectType {
	if o == nil {
		return RunObjectType("")
	}
	return o.Type
}

func (o *RequiredAction) GetSubmitToolOutputs() SubmitToolOutputs {
	if o == nil {
		return SubmitToolOutputs{}
	}
	return o.SubmitToolOutputs
}

// Code - One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
type Code string

const (
	CodeServerError       Code = "server_error"
	CodeRateLimitExceeded Code = "rate_limit_exceeded"
	CodeInvalidPrompt     Code = "invalid_prompt"
)

func (e Code) ToPointer() *Code {
	return &e
}
func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server_error":
		fallthrough
	case "rate_limit_exceeded":
		fallthrough
	case "invalid_prompt":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

// LastError - The last error associated with this run. Will be `null` if there are no errors.
type LastError struct {
	// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
	Code Code `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

func (o *LastError) GetCode() Code {
	if o == nil {
		return Code("")
	}
	return o.Code
}

func (o *LastError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// Reason - The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
type Reason string

const (
	ReasonMaxCompletionTokens Reason = "max_completion_tokens"
	ReasonMaxPromptTokens     Reason = "max_prompt_tokens"
)

func (e Reason) ToPointer() *Reason {
	return &e
}
func (e *Reason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "max_completion_tokens":
		fallthrough
	case "max_prompt_tokens":
		*e = Reason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Reason: %v", v)
	}
}

// IncompleteDetails - Details on why the run is incomplete. Will be `null` if the run is not incomplete.
type IncompleteDetails struct {
	// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
	Reason *Reason `json:"reason,omitempty"`
}

func (o *IncompleteDetails) GetReason() *Reason {
	if o == nil {
		return nil
	}
	return o.Reason
}

type RunObjectToolsType string

const (
	RunObjectToolsTypeAssistantToolsCode       RunObjectToolsType = "AssistantToolsCode"
	RunObjectToolsTypeAssistantToolsFileSearch RunObjectToolsType = "AssistantToolsFileSearch"
	RunObjectToolsTypeAssistantToolsFunction   RunObjectToolsType = "AssistantToolsFunction"
)

type RunObjectTools struct {
	AssistantToolsCode       *AssistantToolsCode
	AssistantToolsFileSearch *AssistantToolsFileSearch
	AssistantToolsFunction   *AssistantToolsFunction

	Type RunObjectToolsType
}

func CreateRunObjectToolsAssistantToolsCode(assistantToolsCode AssistantToolsCode) RunObjectTools {
	typ := RunObjectToolsTypeAssistantToolsCode

	return RunObjectTools{
		AssistantToolsCode: &assistantToolsCode,
		Type:               typ,
	}
}

func CreateRunObjectToolsAssistantToolsFileSearch(assistantToolsFileSearch AssistantToolsFileSearch) RunObjectTools {
	typ := RunObjectToolsTypeAssistantToolsFileSearch

	return RunObjectTools{
		AssistantToolsFileSearch: &assistantToolsFileSearch,
		Type:                     typ,
	}
}

func CreateRunObjectToolsAssistantToolsFunction(assistantToolsFunction AssistantToolsFunction) RunObjectTools {
	typ := RunObjectToolsTypeAssistantToolsFunction

	return RunObjectTools{
		AssistantToolsFunction: &assistantToolsFunction,
		Type:                   typ,
	}
}

func (u *RunObjectTools) UnmarshalJSON(data []byte) error {

	var assistantToolsCode AssistantToolsCode = AssistantToolsCode{}
	if err := utils.UnmarshalJSON(data, &assistantToolsCode, "", true, true); err == nil {
		u.AssistantToolsCode = &assistantToolsCode
		u.Type = RunObjectToolsTypeAssistantToolsCode
		return nil
	}

	var assistantToolsFileSearch AssistantToolsFileSearch = AssistantToolsFileSearch{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFileSearch, "", true, true); err == nil {
		u.AssistantToolsFileSearch = &assistantToolsFileSearch
		u.Type = RunObjectToolsTypeAssistantToolsFileSearch
		return nil
	}

	var assistantToolsFunction AssistantToolsFunction = AssistantToolsFunction{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFunction, "", true, true); err == nil {
		u.AssistantToolsFunction = &assistantToolsFunction
		u.Type = RunObjectToolsTypeAssistantToolsFunction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RunObjectTools", string(data))
}

func (u RunObjectTools) MarshalJSON() ([]byte, error) {
	if u.AssistantToolsCode != nil {
		return utils.MarshalJSON(u.AssistantToolsCode, "", true)
	}

	if u.AssistantToolsFileSearch != nil {
		return utils.MarshalJSON(u.AssistantToolsFileSearch, "", true)
	}

	if u.AssistantToolsFunction != nil {
		return utils.MarshalJSON(u.AssistantToolsFunction, "", true)
	}

	return nil, errors.New("could not marshal union type RunObjectTools: all fields are null")
}

// RunObjectMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type RunObjectMetadata struct {
}

// RunObject - Represents an execution run on a [thread](/docs/api-reference/threads).
type RunObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread.run`.
	Object RunObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the run was created.
	CreatedAt int64 `json:"created_at"`
	// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
	ThreadID string `json:"thread_id"`
	// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
	AssistantID string `json:"assistant_id"`
	// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
	Status RunObjectStatus `json:"status"`
	// Details on the action required to continue the run. Will be `null` if no action is required.
	RequiredAction *RequiredAction `json:"required_action"`
	// The last error associated with this run. Will be `null` if there are no errors.
	LastError *LastError `json:"last_error"`
	// The Unix timestamp (in seconds) for when the run will expire.
	ExpiresAt *int64 `json:"expires_at"`
	// The Unix timestamp (in seconds) for when the run was started.
	StartedAt *int64 `json:"started_at"`
	// The Unix timestamp (in seconds) for when the run was cancelled.
	CancelledAt *int64 `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run failed.
	FailedAt *int64 `json:"failed_at"`
	// The Unix timestamp (in seconds) for when the run was completed.
	CompletedAt *int64 `json:"completed_at"`
	// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
	IncompleteDetails *IncompleteDetails `json:"incomplete_details"`
	// The model that the [assistant](/docs/api-reference/assistants) used for this run.
	Model string `json:"model"`
	// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
	Instructions string `json:"instructions"`
	// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
	Tools []RunObjectTools `json:"tools"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *RunObjectMetadata `json:"metadata"`
	// Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
	Usage *RunCompletionUsage `json:"usage"`
	// The sampling temperature used for this run. If not set, defaults to 1.
	Temperature *float64 `json:"temperature,omitempty"`
	// The nucleus sampling value used for this run. If not set, defaults to 1.
	TopP *float64 `json:"top_p,omitempty"`
	// The maximum number of prompt tokens specified to have been used over the course of the run.
	//
	MaxPromptTokens *int64 `json:"max_prompt_tokens"`
	// The maximum number of completion tokens specified to have been used over the course of the run.
	//
	MaxCompletionTokens *int64 `json:"max_completion_tokens"`
	// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
	TruncationStrategy TruncationObject `json:"truncation_strategy"`
	// Controls which (if any) tool is called by the model.
	// `none` means the model will not call any tools and instead generates a message.
	// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
	// `required` means the model must call one or more tools before responding to the user.
	// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	//
	ToolChoice AssistantsAPIToolChoiceOption `json:"tool_choice"`
	// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
	ParallelToolCalls *bool `default:"true" json:"parallel_tool_calls"`
	// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	//
	ResponseFormat AssistantsAPIResponseFormatOption `json:"response_format"`
}

func (r RunObject) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunObject) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunObject) GetObject() RunObjectObject {
	if o == nil {
		return RunObjectObject("")
	}
	return o.Object
}

func (o *RunObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *RunObject) GetThreadID() string {
	if o == nil {
		return ""
	}
	return o.ThreadID
}

func (o *RunObject) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *RunObject) GetStatus() RunObjectStatus {
	if o == nil {
		return RunObjectStatus("")
	}
	return o.Status
}

func (o *RunObject) GetRequiredAction() *RequiredAction {
	if o == nil {
		return nil
	}
	return o.RequiredAction
}

func (o *RunObject) GetLastError() *LastError {
	if o == nil {
		return nil
	}
	return o.LastError
}

func (o *RunObject) GetExpiresAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *RunObject) GetStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *RunObject) GetCancelledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *RunObject) GetFailedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *RunObject) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *RunObject) GetIncompleteDetails() *IncompleteDetails {
	if o == nil {
		return nil
	}
	return o.IncompleteDetails
}

func (o *RunObject) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *RunObject) GetInstructions() string {
	if o == nil {
		return ""
	}
	return o.Instructions
}

func (o *RunObject) GetTools() []RunObjectTools {
	if o == nil {
		return []RunObjectTools{}
	}
	return o.Tools
}

func (o *RunObject) GetMetadata() *RunObjectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *RunObject) GetUsage() *RunCompletionUsage {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *RunObject) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *RunObject) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *RunObject) GetMaxPromptTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPromptTokens
}

func (o *RunObject) GetMaxCompletionTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxCompletionTokens
}

func (o *RunObject) GetTruncationStrategy() TruncationObject {
	if o == nil {
		return TruncationObject{}
	}
	return o.TruncationStrategy
}

func (o *RunObject) GetToolChoice() AssistantsAPIToolChoiceOption {
	if o == nil {
		return AssistantsAPIToolChoiceOption{}
	}
	return o.ToolChoice
}

func (o *RunObject) GetParallelToolCalls() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelToolCalls
}

func (o *RunObject) GetResponseFormat() AssistantsAPIResponseFormatOption {
	if o == nil {
		return AssistantsAPIResponseFormatOption{}
	}
	return o.ResponseFormat
}
