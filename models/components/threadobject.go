// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ThreadObjectObject - The object type, which is always `thread`.
type ThreadObjectObject string

const (
	ThreadObjectObjectThread ThreadObjectObject = "thread"
)

func (e ThreadObjectObject) ToPointer() *ThreadObjectObject {
	return &e
}
func (e *ThreadObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "thread":
		*e = ThreadObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreadObjectObject: %v", v)
	}
}

type ThreadObjectCodeInterpreter struct {
	// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
	//
	FileIds []string `json:"file_ids,omitempty"`
}

func (o *ThreadObjectCodeInterpreter) GetFileIds() []string {
	if o == nil {
		return nil
	}
	return o.FileIds
}

type ThreadObjectFileSearch struct {
	// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
	//
	VectorStoreIds []string `json:"vector_store_ids,omitempty"`
}

func (o *ThreadObjectFileSearch) GetVectorStoreIds() []string {
	if o == nil {
		return nil
	}
	return o.VectorStoreIds
}

// ThreadObjectToolResources - A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
type ThreadObjectToolResources struct {
	CodeInterpreter *ThreadObjectCodeInterpreter `json:"code_interpreter,omitempty"`
	FileSearch      *ThreadObjectFileSearch      `json:"file_search,omitempty"`
}

func (o *ThreadObjectToolResources) GetCodeInterpreter() *ThreadObjectCodeInterpreter {
	if o == nil {
		return nil
	}
	return o.CodeInterpreter
}

func (o *ThreadObjectToolResources) GetFileSearch() *ThreadObjectFileSearch {
	if o == nil {
		return nil
	}
	return o.FileSearch
}

// ThreadObjectMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type ThreadObjectMetadata struct {
}

// ThreadObject - Represents a thread that contains [messages](/docs/api-reference/messages).
type ThreadObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread`.
	Object ThreadObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the thread was created.
	CreatedAt int64 `json:"created_at"`
	// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
	//
	ToolResources *ThreadObjectToolResources `json:"tool_resources"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *ThreadObjectMetadata `json:"metadata"`
}

func (o *ThreadObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ThreadObject) GetObject() ThreadObjectObject {
	if o == nil {
		return ThreadObjectObject("")
	}
	return o.Object
}

func (o *ThreadObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *ThreadObject) GetToolResources() *ThreadObjectToolResources {
	if o == nil {
		return nil
	}
	return o.ToolResources
}

func (o *ThreadObject) GetMetadata() *ThreadObjectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}
