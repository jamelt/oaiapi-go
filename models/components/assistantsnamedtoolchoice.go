// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AssistantsNamedToolChoiceType - The type of the tool. If type is `function`, the function name must be set
type AssistantsNamedToolChoiceType string

const (
	AssistantsNamedToolChoiceTypeFunction        AssistantsNamedToolChoiceType = "function"
	AssistantsNamedToolChoiceTypeCodeInterpreter AssistantsNamedToolChoiceType = "code_interpreter"
	AssistantsNamedToolChoiceTypeFileSearch      AssistantsNamedToolChoiceType = "file_search"
)

func (e AssistantsNamedToolChoiceType) ToPointer() *AssistantsNamedToolChoiceType {
	return &e
}
func (e *AssistantsNamedToolChoiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		fallthrough
	case "code_interpreter":
		fallthrough
	case "file_search":
		*e = AssistantsNamedToolChoiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantsNamedToolChoiceType: %v", v)
	}
}

type AssistantsNamedToolChoiceFunction struct {
	// The name of the function to call.
	Name string `json:"name"`
}

func (o *AssistantsNamedToolChoiceFunction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// AssistantsNamedToolChoice - Specifies a tool the model should use. Use to force the model to call a specific tool.
type AssistantsNamedToolChoice struct {
	// The type of the tool. If type is `function`, the function name must be set
	Type     AssistantsNamedToolChoiceType      `json:"type"`
	Function *AssistantsNamedToolChoiceFunction `json:"function,omitempty"`
}

func (o *AssistantsNamedToolChoice) GetType() AssistantsNamedToolChoiceType {
	if o == nil {
		return AssistantsNamedToolChoiceType("")
	}
	return o.Type
}

func (o *AssistantsNamedToolChoice) GetFunction() *AssistantsNamedToolChoiceFunction {
	if o == nil {
		return nil
	}
	return o.Function
}
