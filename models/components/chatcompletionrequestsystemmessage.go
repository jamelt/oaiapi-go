// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type ContentType string

const (
	ContentTypeStr                                                  ContentType = "str"
	ContentTypeArrayOfChatCompletionRequestSystemMessageContentPart ContentType = "arrayOfChatCompletionRequestSystemMessageContentPart"
)

// Content - The contents of the system message.
type Content struct {
	Str                                                  *string
	ArrayOfChatCompletionRequestSystemMessageContentPart []ChatCompletionRequestSystemMessageContentPart

	Type ContentType
}

func CreateContentStr(str string) Content {
	typ := ContentTypeStr

	return Content{
		Str:  &str,
		Type: typ,
	}
}

func CreateContentArrayOfChatCompletionRequestSystemMessageContentPart(arrayOfChatCompletionRequestSystemMessageContentPart []ChatCompletionRequestSystemMessageContentPart) Content {
	typ := ContentTypeArrayOfChatCompletionRequestSystemMessageContentPart

	return Content{
		ArrayOfChatCompletionRequestSystemMessageContentPart: arrayOfChatCompletionRequestSystemMessageContentPart,
		Type: typ,
	}
}

func (u *Content) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ContentTypeStr
		return nil
	}

	var arrayOfChatCompletionRequestSystemMessageContentPart []ChatCompletionRequestSystemMessageContentPart = []ChatCompletionRequestSystemMessageContentPart{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionRequestSystemMessageContentPart, "", true, true); err == nil {
		u.ArrayOfChatCompletionRequestSystemMessageContentPart = arrayOfChatCompletionRequestSystemMessageContentPart
		u.Type = ContentTypeArrayOfChatCompletionRequestSystemMessageContentPart
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Content", string(data))
}

func (u Content) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionRequestSystemMessageContentPart != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionRequestSystemMessageContentPart, "", true)
	}

	return nil, errors.New("could not marshal union type Content: all fields are null")
}

// Role - The role of the messages author, in this case `system`.
type Role string

const (
	RoleSystem Role = "system"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type ChatCompletionRequestSystemMessage struct {
	// The contents of the system message.
	Content Content `json:"content"`
	// The role of the messages author, in this case `system`.
	Role Role `json:"role"`
	// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
}

func (o *ChatCompletionRequestSystemMessage) GetContent() Content {
	if o == nil {
		return Content{}
	}
	return o.Content
}

func (o *ChatCompletionRequestSystemMessage) GetRole() Role {
	if o == nil {
		return Role("")
	}
	return o.Role
}

func (o *ChatCompletionRequestSystemMessage) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}
