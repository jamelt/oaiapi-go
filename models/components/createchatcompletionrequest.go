// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type CreateChatCompletionRequestModel2 string

const (
	CreateChatCompletionRequestModel2O1Preview                    CreateChatCompletionRequestModel2 = "o1-preview"
	CreateChatCompletionRequestModel2O1Preview20240912            CreateChatCompletionRequestModel2 = "o1-preview-2024-09-12"
	CreateChatCompletionRequestModel2O1Mini                       CreateChatCompletionRequestModel2 = "o1-mini"
	CreateChatCompletionRequestModel2O1Mini20240912               CreateChatCompletionRequestModel2 = "o1-mini-2024-09-12"
	CreateChatCompletionRequestModel2Gpt4o                        CreateChatCompletionRequestModel2 = "gpt-4o"
	CreateChatCompletionRequestModel2Gpt4o20240806                CreateChatCompletionRequestModel2 = "gpt-4o-2024-08-06"
	CreateChatCompletionRequestModel2Gpt4o20240513                CreateChatCompletionRequestModel2 = "gpt-4o-2024-05-13"
	CreateChatCompletionRequestModel2Gpt4oRealtimePreview         CreateChatCompletionRequestModel2 = "gpt-4o-realtime-preview"
	CreateChatCompletionRequestModel2Gpt4oRealtimePreview20241001 CreateChatCompletionRequestModel2 = "gpt-4o-realtime-preview-2024-10-01"
	CreateChatCompletionRequestModel2Gpt4oAudioPreview            CreateChatCompletionRequestModel2 = "gpt-4o-audio-preview"
	CreateChatCompletionRequestModel2Gpt4oAudioPreview20241001    CreateChatCompletionRequestModel2 = "gpt-4o-audio-preview-2024-10-01"
	CreateChatCompletionRequestModel2Chatgpt4oLatest              CreateChatCompletionRequestModel2 = "chatgpt-4o-latest"
	CreateChatCompletionRequestModel2Gpt4oMini                    CreateChatCompletionRequestModel2 = "gpt-4o-mini"
	CreateChatCompletionRequestModel2Gpt4oMini20240718            CreateChatCompletionRequestModel2 = "gpt-4o-mini-2024-07-18"
	CreateChatCompletionRequestModel2Gpt4Turbo                    CreateChatCompletionRequestModel2 = "gpt-4-turbo"
	CreateChatCompletionRequestModel2Gpt4Turbo20240409            CreateChatCompletionRequestModel2 = "gpt-4-turbo-2024-04-09"
	CreateChatCompletionRequestModel2Gpt40125Preview              CreateChatCompletionRequestModel2 = "gpt-4-0125-preview"
	CreateChatCompletionRequestModel2Gpt4TurboPreview             CreateChatCompletionRequestModel2 = "gpt-4-turbo-preview"
	CreateChatCompletionRequestModel2Gpt41106Preview              CreateChatCompletionRequestModel2 = "gpt-4-1106-preview"
	CreateChatCompletionRequestModel2Gpt4VisionPreview            CreateChatCompletionRequestModel2 = "gpt-4-vision-preview"
	CreateChatCompletionRequestModel2Gpt4                         CreateChatCompletionRequestModel2 = "gpt-4"
	CreateChatCompletionRequestModel2Gpt40314                     CreateChatCompletionRequestModel2 = "gpt-4-0314"
	CreateChatCompletionRequestModel2Gpt40613                     CreateChatCompletionRequestModel2 = "gpt-4-0613"
	CreateChatCompletionRequestModel2Gpt432k                      CreateChatCompletionRequestModel2 = "gpt-4-32k"
	CreateChatCompletionRequestModel2Gpt432k0314                  CreateChatCompletionRequestModel2 = "gpt-4-32k-0314"
	CreateChatCompletionRequestModel2Gpt432k0613                  CreateChatCompletionRequestModel2 = "gpt-4-32k-0613"
	CreateChatCompletionRequestModel2Gpt35Turbo                   CreateChatCompletionRequestModel2 = "gpt-3.5-turbo"
	CreateChatCompletionRequestModel2Gpt35Turbo16k                CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-16k"
	CreateChatCompletionRequestModel2Gpt35Turbo0301               CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-0301"
	CreateChatCompletionRequestModel2Gpt35Turbo0613               CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-0613"
	CreateChatCompletionRequestModel2Gpt35Turbo1106               CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-1106"
	CreateChatCompletionRequestModel2Gpt35Turbo0125               CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-0125"
	CreateChatCompletionRequestModel2Gpt35Turbo16k0613            CreateChatCompletionRequestModel2 = "gpt-3.5-turbo-16k-0613"
)

func (e CreateChatCompletionRequestModel2) ToPointer() *CreateChatCompletionRequestModel2 {
	return &e
}
func (e *CreateChatCompletionRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "o1-preview":
		fallthrough
	case "o1-preview-2024-09-12":
		fallthrough
	case "o1-mini":
		fallthrough
	case "o1-mini-2024-09-12":
		fallthrough
	case "gpt-4o":
		fallthrough
	case "gpt-4o-2024-08-06":
		fallthrough
	case "gpt-4o-2024-05-13":
		fallthrough
	case "gpt-4o-realtime-preview":
		fallthrough
	case "gpt-4o-realtime-preview-2024-10-01":
		fallthrough
	case "gpt-4o-audio-preview":
		fallthrough
	case "gpt-4o-audio-preview-2024-10-01":
		fallthrough
	case "chatgpt-4o-latest":
		fallthrough
	case "gpt-4o-mini":
		fallthrough
	case "gpt-4o-mini-2024-07-18":
		fallthrough
	case "gpt-4-turbo":
		fallthrough
	case "gpt-4-turbo-2024-04-09":
		fallthrough
	case "gpt-4-0125-preview":
		fallthrough
	case "gpt-4-turbo-preview":
		fallthrough
	case "gpt-4-1106-preview":
		fallthrough
	case "gpt-4-vision-preview":
		fallthrough
	case "gpt-4":
		fallthrough
	case "gpt-4-0314":
		fallthrough
	case "gpt-4-0613":
		fallthrough
	case "gpt-4-32k":
		fallthrough
	case "gpt-4-32k-0314":
		fallthrough
	case "gpt-4-32k-0613":
		fallthrough
	case "gpt-3.5-turbo":
		fallthrough
	case "gpt-3.5-turbo-16k":
		fallthrough
	case "gpt-3.5-turbo-0301":
		fallthrough
	case "gpt-3.5-turbo-0613":
		fallthrough
	case "gpt-3.5-turbo-1106":
		fallthrough
	case "gpt-3.5-turbo-0125":
		fallthrough
	case "gpt-3.5-turbo-16k-0613":
		*e = CreateChatCompletionRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChatCompletionRequestModel2: %v", v)
	}
}

type CreateChatCompletionRequestModelType string

const (
	CreateChatCompletionRequestModelTypeStr                               CreateChatCompletionRequestModelType = "str"
	CreateChatCompletionRequestModelTypeCreateChatCompletionRequestModel2 CreateChatCompletionRequestModelType = "CreateChatCompletionRequest_model_2"
)

// CreateChatCompletionRequestModel - ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
type CreateChatCompletionRequestModel struct {
	Str                               *string
	CreateChatCompletionRequestModel2 *CreateChatCompletionRequestModel2

	Type CreateChatCompletionRequestModelType
}

func CreateCreateChatCompletionRequestModelStr(str string) CreateChatCompletionRequestModel {
	typ := CreateChatCompletionRequestModelTypeStr

	return CreateChatCompletionRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateChatCompletionRequestModelCreateChatCompletionRequestModel2(createChatCompletionRequestModel2 CreateChatCompletionRequestModel2) CreateChatCompletionRequestModel {
	typ := CreateChatCompletionRequestModelTypeCreateChatCompletionRequestModel2

	return CreateChatCompletionRequestModel{
		CreateChatCompletionRequestModel2: &createChatCompletionRequestModel2,
		Type:                              typ,
	}
}

func (u *CreateChatCompletionRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateChatCompletionRequestModelTypeStr
		return nil
	}

	var createChatCompletionRequestModel2 CreateChatCompletionRequestModel2 = CreateChatCompletionRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createChatCompletionRequestModel2, "", true, true); err == nil {
		u.CreateChatCompletionRequestModel2 = &createChatCompletionRequestModel2
		u.Type = CreateChatCompletionRequestModelTypeCreateChatCompletionRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateChatCompletionRequestModel", string(data))
}

func (u CreateChatCompletionRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateChatCompletionRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateChatCompletionRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateChatCompletionRequestModel: all fields are null")
}

// PredictionType - The type of the predicted content you want to provide. This type is
// currently always `content`.
type PredictionType string

const (
	PredictionTypeContent PredictionType = "content"
)

func (e PredictionType) ToPointer() *PredictionType {
	return &e
}
func (e *PredictionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "content":
		*e = PredictionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictionType: %v", v)
	}
}

type PredictionContentType string

const (
	PredictionContentTypeStr                                                PredictionContentType = "str"
	PredictionContentTypeArrayOfChatCompletionRequestMessageContentPartText PredictionContentType = "arrayOfChatCompletionRequestMessageContentPartText"
)

// PredictionContent - The content that should be matched when generating a model response.
// If generated tokens would match this content, the entire model response
// can be returned much more quickly.
type PredictionContent struct {
	Str                                                *string
	ArrayOfChatCompletionRequestMessageContentPartText []ChatCompletionRequestMessageContentPartText

	Type PredictionContentType
}

func CreatePredictionContentStr(str string) PredictionContent {
	typ := PredictionContentTypeStr

	return PredictionContent{
		Str:  &str,
		Type: typ,
	}
}

func CreatePredictionContentArrayOfChatCompletionRequestMessageContentPartText(arrayOfChatCompletionRequestMessageContentPartText []ChatCompletionRequestMessageContentPartText) PredictionContent {
	typ := PredictionContentTypeArrayOfChatCompletionRequestMessageContentPartText

	return PredictionContent{
		ArrayOfChatCompletionRequestMessageContentPartText: arrayOfChatCompletionRequestMessageContentPartText,
		Type: typ,
	}
}

func (u *PredictionContent) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PredictionContentTypeStr
		return nil
	}

	var arrayOfChatCompletionRequestMessageContentPartText []ChatCompletionRequestMessageContentPartText = []ChatCompletionRequestMessageContentPartText{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionRequestMessageContentPartText, "", true, true); err == nil {
		u.ArrayOfChatCompletionRequestMessageContentPartText = arrayOfChatCompletionRequestMessageContentPartText
		u.Type = PredictionContentTypeArrayOfChatCompletionRequestMessageContentPartText
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PredictionContent", string(data))
}

func (u PredictionContent) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionRequestMessageContentPartText != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionRequestMessageContentPartText, "", true)
	}

	return nil, errors.New("could not marshal union type PredictionContent: all fields are null")
}

// StaticContent - Static predicted output content, such as the content of a text file that is
// being regenerated.
type StaticContent struct {
	// The type of the predicted content you want to provide. This type is
	// currently always `content`.
	//
	Type PredictionType `json:"type"`
	// The content that should be matched when generating a model response.
	// If generated tokens would match this content, the entire model response
	// can be returned much more quickly.
	//
	Content PredictionContent `json:"content"`
}

func (o *StaticContent) GetType() PredictionType {
	if o == nil {
		return PredictionType("")
	}
	return o.Type
}

func (o *StaticContent) GetContent() PredictionContent {
	if o == nil {
		return PredictionContent{}
	}
	return o.Content
}

type PredictionUnionType string

const (
	PredictionUnionTypeStaticContent PredictionUnionType = "Static Content"
)

// Prediction - Configuration for a [Predicted Output](/docs/guides/latency-optimization#use-predicted-outputs),
// which can greatly improve response times when large parts of the model
// response are known ahead of time. This is most common when you are
// regenerating a file with only minor changes to most of the content.
type Prediction struct {
	StaticContent *StaticContent

	Type PredictionUnionType
}

func CreatePredictionStaticContent(staticContent StaticContent) Prediction {
	typ := PredictionUnionTypeStaticContent

	return Prediction{
		StaticContent: &staticContent,
		Type:          typ,
	}
}

func (u *Prediction) UnmarshalJSON(data []byte) error {

	var staticContent StaticContent = StaticContent{}
	if err := utils.UnmarshalJSON(data, &staticContent, "", true, true); err == nil {
		u.StaticContent = &staticContent
		u.Type = PredictionUnionTypeStaticContent
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Prediction", string(data))
}

func (u Prediction) MarshalJSON() ([]byte, error) {
	if u.StaticContent != nil {
		return utils.MarshalJSON(u.StaticContent, "", true)
	}

	return nil, errors.New("could not marshal union type Prediction: all fields are null")
}

// CreateChatCompletionRequestVoice - The voice the model uses to respond. Supported voices are `alloy`,
// `ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`.
type CreateChatCompletionRequestVoice string

const (
	CreateChatCompletionRequestVoiceAlloy   CreateChatCompletionRequestVoice = "alloy"
	CreateChatCompletionRequestVoiceAsh     CreateChatCompletionRequestVoice = "ash"
	CreateChatCompletionRequestVoiceBallad  CreateChatCompletionRequestVoice = "ballad"
	CreateChatCompletionRequestVoiceCoral   CreateChatCompletionRequestVoice = "coral"
	CreateChatCompletionRequestVoiceEcho    CreateChatCompletionRequestVoice = "echo"
	CreateChatCompletionRequestVoiceSage    CreateChatCompletionRequestVoice = "sage"
	CreateChatCompletionRequestVoiceShimmer CreateChatCompletionRequestVoice = "shimmer"
	CreateChatCompletionRequestVoiceVerse   CreateChatCompletionRequestVoice = "verse"
)

func (e CreateChatCompletionRequestVoice) ToPointer() *CreateChatCompletionRequestVoice {
	return &e
}
func (e *CreateChatCompletionRequestVoice) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alloy":
		fallthrough
	case "ash":
		fallthrough
	case "ballad":
		fallthrough
	case "coral":
		fallthrough
	case "echo":
		fallthrough
	case "sage":
		fallthrough
	case "shimmer":
		fallthrough
	case "verse":
		*e = CreateChatCompletionRequestVoice(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChatCompletionRequestVoice: %v", v)
	}
}

// CreateChatCompletionRequestFormat - Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
// `opus`, or `pcm16`.
type CreateChatCompletionRequestFormat string

const (
	CreateChatCompletionRequestFormatWav   CreateChatCompletionRequestFormat = "wav"
	CreateChatCompletionRequestFormatMp3   CreateChatCompletionRequestFormat = "mp3"
	CreateChatCompletionRequestFormatFlac  CreateChatCompletionRequestFormat = "flac"
	CreateChatCompletionRequestFormatOpus  CreateChatCompletionRequestFormat = "opus"
	CreateChatCompletionRequestFormatPcm16 CreateChatCompletionRequestFormat = "pcm16"
)

func (e CreateChatCompletionRequestFormat) ToPointer() *CreateChatCompletionRequestFormat {
	return &e
}
func (e *CreateChatCompletionRequestFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "wav":
		fallthrough
	case "mp3":
		fallthrough
	case "flac":
		fallthrough
	case "opus":
		fallthrough
	case "pcm16":
		*e = CreateChatCompletionRequestFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChatCompletionRequestFormat: %v", v)
	}
}

// CreateChatCompletionRequestAudio - Parameters for audio output. Required when audio output is requested with
// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
type CreateChatCompletionRequestAudio struct {
	// The voice the model uses to respond. Supported voices are `alloy`,
	// `ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`.
	//
	Voice CreateChatCompletionRequestVoice `json:"voice"`
	// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
	// `opus`, or `pcm16`.
	//
	Format CreateChatCompletionRequestFormat `json:"format"`
}

func (o *CreateChatCompletionRequestAudio) GetVoice() CreateChatCompletionRequestVoice {
	if o == nil {
		return CreateChatCompletionRequestVoice("")
	}
	return o.Voice
}

func (o *CreateChatCompletionRequestAudio) GetFormat() CreateChatCompletionRequestFormat {
	if o == nil {
		return CreateChatCompletionRequestFormat("")
	}
	return o.Format
}

type CreateChatCompletionRequestResponseFormatType string

const (
	CreateChatCompletionRequestResponseFormatTypeResponseFormatText       CreateChatCompletionRequestResponseFormatType = "ResponseFormatText"
	CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONObject CreateChatCompletionRequestResponseFormatType = "ResponseFormatJsonObject"
	CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONSchema CreateChatCompletionRequestResponseFormatType = "ResponseFormatJsonSchema"
)

// CreateChatCompletionRequestResponseFormat - An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
//
// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
//
// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
//
// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
type CreateChatCompletionRequestResponseFormat struct {
	ResponseFormatText       *ResponseFormatText
	ResponseFormatJSONObject *ResponseFormatJSONObject
	ResponseFormatJSONSchema *ResponseFormatJSONSchema

	Type CreateChatCompletionRequestResponseFormatType
}

func CreateCreateChatCompletionRequestResponseFormatResponseFormatText(responseFormatText ResponseFormatText) CreateChatCompletionRequestResponseFormat {
	typ := CreateChatCompletionRequestResponseFormatTypeResponseFormatText

	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatText: &responseFormatText,
		Type:               typ,
	}
}

func CreateCreateChatCompletionRequestResponseFormatResponseFormatJSONObject(responseFormatJSONObject ResponseFormatJSONObject) CreateChatCompletionRequestResponseFormat {
	typ := CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONObject

	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatJSONObject: &responseFormatJSONObject,
		Type:                     typ,
	}
}

func CreateCreateChatCompletionRequestResponseFormatResponseFormatJSONSchema(responseFormatJSONSchema ResponseFormatJSONSchema) CreateChatCompletionRequestResponseFormat {
	typ := CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONSchema

	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatJSONSchema: &responseFormatJSONSchema,
		Type:                     typ,
	}
}

func (u *CreateChatCompletionRequestResponseFormat) UnmarshalJSON(data []byte) error {

	var responseFormatText ResponseFormatText = ResponseFormatText{}
	if err := utils.UnmarshalJSON(data, &responseFormatText, "", true, true); err == nil {
		u.ResponseFormatText = &responseFormatText
		u.Type = CreateChatCompletionRequestResponseFormatTypeResponseFormatText
		return nil
	}

	var responseFormatJSONObject ResponseFormatJSONObject = ResponseFormatJSONObject{}
	if err := utils.UnmarshalJSON(data, &responseFormatJSONObject, "", true, true); err == nil {
		u.ResponseFormatJSONObject = &responseFormatJSONObject
		u.Type = CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONObject
		return nil
	}

	var responseFormatJSONSchema ResponseFormatJSONSchema = ResponseFormatJSONSchema{}
	if err := utils.UnmarshalJSON(data, &responseFormatJSONSchema, "", true, true); err == nil {
		u.ResponseFormatJSONSchema = &responseFormatJSONSchema
		u.Type = CreateChatCompletionRequestResponseFormatTypeResponseFormatJSONSchema
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateChatCompletionRequestResponseFormat", string(data))
}

func (u CreateChatCompletionRequestResponseFormat) MarshalJSON() ([]byte, error) {
	if u.ResponseFormatText != nil {
		return utils.MarshalJSON(u.ResponseFormatText, "", true)
	}

	if u.ResponseFormatJSONObject != nil {
		return utils.MarshalJSON(u.ResponseFormatJSONObject, "", true)
	}

	if u.ResponseFormatJSONSchema != nil {
		return utils.MarshalJSON(u.ResponseFormatJSONSchema, "", true)
	}

	return nil, errors.New("could not marshal union type CreateChatCompletionRequestResponseFormat: all fields are null")
}

// ServiceTier - Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
//
//   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
//
//   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
//
//   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
//
//   - When not set, the default behavior is 'auto'.
//
//     When this parameter is set, the response body will include the `service_tier` utilized.
type ServiceTier string

const (
	ServiceTierAuto    ServiceTier = "auto"
	ServiceTierDefault ServiceTier = "default"
)

func (e ServiceTier) ToPointer() *ServiceTier {
	return &e
}
func (e *ServiceTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "default":
		*e = ServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceTier: %v", v)
	}
}

type StopType string

const (
	StopTypeStr        StopType = "str"
	StopTypeArrayOfStr StopType = "arrayOfStr"
)

// Stop - Up to 4 sequences where the API will stop generating further tokens.
type Stop struct {
	Str        *string
	ArrayOfStr []string

	Type StopType
}

func CreateStopStr(str string) Stop {
	typ := StopTypeStr

	return Stop{
		Str:  &str,
		Type: typ,
	}
}

func CreateStopArrayOfStr(arrayOfStr []string) Stop {
	typ := StopTypeArrayOfStr

	return Stop{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Stop) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StopTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = StopTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Stop", string(data))
}

func (u Stop) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Stop: all fields are null")
}

// One - `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type One string

const (
	OneNone One = "none"
	OneAuto One = "auto"
)

func (e One) ToPointer() *One {
	return &e
}
func (e *One) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		*e = One(v)
		return nil
	default:
		return fmt.Errorf("invalid value for One: %v", v)
	}
}

type CreateChatCompletionRequestFunctionCallType string

const (
	CreateChatCompletionRequestFunctionCallTypeOne                              CreateChatCompletionRequestFunctionCallType = "1"
	CreateChatCompletionRequestFunctionCallTypeChatCompletionFunctionCallOption CreateChatCompletionRequestFunctionCallType = "ChatCompletionFunctionCallOption"
)

// CreateChatCompletionRequestFunctionCall - Deprecated in favor of `tool_choice`.
//
// Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type CreateChatCompletionRequestFunctionCall struct {
	One                              *One
	ChatCompletionFunctionCallOption *ChatCompletionFunctionCallOption

	Type CreateChatCompletionRequestFunctionCallType
}

func CreateCreateChatCompletionRequestFunctionCallOne(one One) CreateChatCompletionRequestFunctionCall {
	typ := CreateChatCompletionRequestFunctionCallTypeOne

	return CreateChatCompletionRequestFunctionCall{
		One:  &one,
		Type: typ,
	}
}

func CreateCreateChatCompletionRequestFunctionCallChatCompletionFunctionCallOption(chatCompletionFunctionCallOption ChatCompletionFunctionCallOption) CreateChatCompletionRequestFunctionCall {
	typ := CreateChatCompletionRequestFunctionCallTypeChatCompletionFunctionCallOption

	return CreateChatCompletionRequestFunctionCall{
		ChatCompletionFunctionCallOption: &chatCompletionFunctionCallOption,
		Type:                             typ,
	}
}

func (u *CreateChatCompletionRequestFunctionCall) UnmarshalJSON(data []byte) error {

	var chatCompletionFunctionCallOption ChatCompletionFunctionCallOption = ChatCompletionFunctionCallOption{}
	if err := utils.UnmarshalJSON(data, &chatCompletionFunctionCallOption, "", true, true); err == nil {
		u.ChatCompletionFunctionCallOption = &chatCompletionFunctionCallOption
		u.Type = CreateChatCompletionRequestFunctionCallTypeChatCompletionFunctionCallOption
		return nil
	}

	var one One = One("")
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = CreateChatCompletionRequestFunctionCallTypeOne
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateChatCompletionRequestFunctionCall", string(data))
}

func (u CreateChatCompletionRequestFunctionCall) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.ChatCompletionFunctionCallOption != nil {
		return utils.MarshalJSON(u.ChatCompletionFunctionCallOption, "", true)
	}

	return nil, errors.New("could not marshal union type CreateChatCompletionRequestFunctionCall: all fields are null")
}

type CreateChatCompletionRequest struct {
	// A list of messages comprising the conversation so far. Depending on the
	// [model](/docs/models) you use, different message types (modalities) are
	// supported, like [text](/docs/guides/text-generation),
	// [images](/docs/guides/vision), and [audio](/docs/guides/audio).
	//
	Messages []ChatCompletionRequestMessage `json:"messages"`
	// ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
	Model CreateChatCompletionRequestModel `json:"model"`
	// Whether or not to store the output of this chat completion request
	// for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
	//
	Store *bool `default:"false" json:"store"`
	// Developer-defined tags and values used for filtering completions
	// in the [dashboard](https://platform.openai.com/chat-completions).
	//
	Metadata map[string]string `json:"metadata,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
	//
	FrequencyPenalty *float64 `default:"0" json:"frequency_penalty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	LogitBias map[string]int64 `json:"logit_bias,omitempty"`
	// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
	Logprobs *bool `default:"false" json:"logprobs"`
	// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
	TopLogprobs *int64 `json:"top_logprobs,omitempty"`
	// The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.
	//
	// This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
	//
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
	//
	MaxCompletionTokens *int64 `json:"max_completion_tokens,omitempty"`
	// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
	N *int64 `default:"1" json:"n"`
	// Output types that you would like the model to generate for this request.
	// Most models are capable of generating text, which is the default:
	//
	// `["text"]`
	//
	// The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
	// request that this model generate both text and audio responses, you can
	// use:
	//
	// `["text", "audio"]`
	//
	Modalities []ChatCompletionModalities `json:"modalities,omitempty"`
	// Configuration for a [Predicted Output](/docs/guides/latency-optimization#use-predicted-outputs),
	// which can greatly improve response times when large parts of the model
	// response are known ahead of time. This is most common when you are
	// regenerating a file with only minor changes to most of the content.
	//
	Prediction *Prediction `json:"prediction,omitempty"`
	// Parameters for audio output. Required when audio output is requested with
	// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
	//
	Audio *CreateChatCompletionRequestAudio `json:"audio,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
	//
	PresencePenalty *float64 `default:"0" json:"presence_penalty"`
	// An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	//
	ResponseFormat *CreateChatCompletionRequestResponseFormat `json:"response_format,omitempty"`
	// This feature is in Beta.
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	//
	Seed *int64 `json:"seed,omitempty"`
	// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
	//
	//   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
	//   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
	//   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
	//   - When not set, the default behavior is 'auto'.
	//
	//   When this parameter is set, the response body will include the `service_tier` utilized.
	//
	ServiceTier *ServiceTier `default:"auto" json:"service_tier"`
	// Up to 4 sequences where the API will stop generating further tokens.
	//
	Stop *Stop `json:"stop,omitempty"`
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	//
	Stream *bool `default:"false" json:"stream"`
	// Options for streaming response. Only set this when you set `stream: true`.
	//
	StreamOptions *ChatCompletionStreamOptions `json:"stream_options,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	//
	Temperature *float64 `default:"1" json:"temperature"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	//
	TopP *float64 `default:"1" json:"top_p"`
	// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	//
	Tools []ChatCompletionTool `json:"tools,omitempty"`
	// Controls which (if any) tool is called by the model.
	// `none` means the model will not call any tool and instead generates a message.
	// `auto` means the model can pick between generating a message or calling one or more tools.
	// `required` means the model must call one or more tools.
	// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	//
	// `none` is the default when no tools are present. `auto` is the default if tools are present.
	//
	ToolChoice *ChatCompletionToolChoiceOption `json:"tool_choice,omitempty"`
	// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
	ParallelToolCalls *bool `default:"true" json:"parallel_tool_calls"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
	//
	User *string `json:"user,omitempty"`
	// Deprecated in favor of `tool_choice`.
	//
	// Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
	//
	// `none` is the default when no functions are present. `auto` is the default if functions are present.
	//
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	FunctionCall *CreateChatCompletionRequestFunctionCall `json:"function_call,omitempty"`
	// Deprecated in favor of `tools`.
	//
	// A list of functions the model may generate JSON inputs for.
	//
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Functions []ChatCompletionFunctions `json:"functions,omitempty"`
}

func (c CreateChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateChatCompletionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateChatCompletionRequest) GetMessages() []ChatCompletionRequestMessage {
	if o == nil {
		return []ChatCompletionRequestMessage{}
	}
	return o.Messages
}

func (o *CreateChatCompletionRequest) GetModel() CreateChatCompletionRequestModel {
	if o == nil {
		return CreateChatCompletionRequestModel{}
	}
	return o.Model
}

func (o *CreateChatCompletionRequest) GetStore() *bool {
	if o == nil {
		return nil
	}
	return o.Store
}

func (o *CreateChatCompletionRequest) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateChatCompletionRequest) GetFrequencyPenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.FrequencyPenalty
}

func (o *CreateChatCompletionRequest) GetLogitBias() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.LogitBias
}

func (o *CreateChatCompletionRequest) GetLogprobs() *bool {
	if o == nil {
		return nil
	}
	return o.Logprobs
}

func (o *CreateChatCompletionRequest) GetTopLogprobs() *int64 {
	if o == nil {
		return nil
	}
	return o.TopLogprobs
}

func (o *CreateChatCompletionRequest) GetMaxTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxTokens
}

func (o *CreateChatCompletionRequest) GetMaxCompletionTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxCompletionTokens
}

func (o *CreateChatCompletionRequest) GetN() *int64 {
	if o == nil {
		return nil
	}
	return o.N
}

func (o *CreateChatCompletionRequest) GetModalities() []ChatCompletionModalities {
	if o == nil {
		return nil
	}
	return o.Modalities
}

func (o *CreateChatCompletionRequest) GetPrediction() *Prediction {
	if o == nil {
		return nil
	}
	return o.Prediction
}

func (o *CreateChatCompletionRequest) GetAudio() *CreateChatCompletionRequestAudio {
	if o == nil {
		return nil
	}
	return o.Audio
}

func (o *CreateChatCompletionRequest) GetPresencePenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.PresencePenalty
}

func (o *CreateChatCompletionRequest) GetResponseFormat() *CreateChatCompletionRequestResponseFormat {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}

func (o *CreateChatCompletionRequest) GetSeed() *int64 {
	if o == nil {
		return nil
	}
	return o.Seed
}

func (o *CreateChatCompletionRequest) GetServiceTier() *ServiceTier {
	if o == nil {
		return nil
	}
	return o.ServiceTier
}

func (o *CreateChatCompletionRequest) GetStop() *Stop {
	if o == nil {
		return nil
	}
	return o.Stop
}

func (o *CreateChatCompletionRequest) GetStream() *bool {
	if o == nil {
		return nil
	}
	return o.Stream
}

func (o *CreateChatCompletionRequest) GetStreamOptions() *ChatCompletionStreamOptions {
	if o == nil {
		return nil
	}
	return o.StreamOptions
}

func (o *CreateChatCompletionRequest) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateChatCompletionRequest) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *CreateChatCompletionRequest) GetTools() []ChatCompletionTool {
	if o == nil {
		return nil
	}
	return o.Tools
}

func (o *CreateChatCompletionRequest) GetToolChoice() *ChatCompletionToolChoiceOption {
	if o == nil {
		return nil
	}
	return o.ToolChoice
}

func (o *CreateChatCompletionRequest) GetParallelToolCalls() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelToolCalls
}

func (o *CreateChatCompletionRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *CreateChatCompletionRequest) GetFunctionCall() *CreateChatCompletionRequestFunctionCall {
	if o == nil {
		return nil
	}
	return o.FunctionCall
}

func (o *CreateChatCompletionRequest) GetFunctions() []ChatCompletionFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}
