// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ListBatchesResponseObject string

const (
	ListBatchesResponseObjectList ListBatchesResponseObject = "list"
)

func (e ListBatchesResponseObject) ToPointer() *ListBatchesResponseObject {
	return &e
}
func (e *ListBatchesResponseObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		*e = ListBatchesResponseObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBatchesResponseObject: %v", v)
	}
}

type ListBatchesResponse struct {
	Data    []Batch                   `json:"data"`
	FirstID *string                   `json:"first_id,omitempty"`
	LastID  *string                   `json:"last_id,omitempty"`
	HasMore bool                      `json:"has_more"`
	Object  ListBatchesResponseObject `json:"object"`
}

func (o *ListBatchesResponse) GetData() []Batch {
	if o == nil {
		return []Batch{}
	}
	return o.Data
}

func (o *ListBatchesResponse) GetFirstID() *string {
	if o == nil {
		return nil
	}
	return o.FirstID
}

func (o *ListBatchesResponse) GetLastID() *string {
	if o == nil {
		return nil
	}
	return o.LastID
}

func (o *ListBatchesResponse) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}

func (o *ListBatchesResponse) GetObject() ListBatchesResponseObject {
	if o == nil {
		return ListBatchesResponseObject("")
	}
	return o.Object
}
