// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AuditLogProject - The project that the action was scoped to. Absent for actions not scoped to projects.
type AuditLogProject struct {
	// The project ID.
	ID *string `json:"id,omitempty"`
	// The project title.
	Name *string `json:"name,omitempty"`
}

func (o *AuditLogProject) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AuditLogProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// AuditLogData - The payload used to create the API key.
type AuditLogData struct {
	// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
	Scopes []string `json:"scopes,omitempty"`
}

func (o *AuditLogData) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

// APIKeyCreated - The details for events with this `type`.
type APIKeyCreated struct {
	// The tracking ID of the API key.
	ID *string `json:"id,omitempty"`
	// The payload used to create the API key.
	Data *AuditLogData `json:"data,omitempty"`
}

func (o *APIKeyCreated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *APIKeyCreated) GetData() *AuditLogData {
	if o == nil {
		return nil
	}
	return o.Data
}

// ChangesRequested - The payload used to update the API key.
type ChangesRequested struct {
	// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
	Scopes []string `json:"scopes,omitempty"`
}

func (o *ChangesRequested) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

// APIKeyUpdated - The details for events with this `type`.
type APIKeyUpdated struct {
	// The tracking ID of the API key.
	ID *string `json:"id,omitempty"`
	// The payload used to update the API key.
	ChangesRequested *ChangesRequested `json:"changes_requested,omitempty"`
}

func (o *APIKeyUpdated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *APIKeyUpdated) GetChangesRequested() *ChangesRequested {
	if o == nil {
		return nil
	}
	return o.ChangesRequested
}

// APIKeyDeleted - The details for events with this `type`.
type APIKeyDeleted struct {
	// The tracking ID of the API key.
	ID *string `json:"id,omitempty"`
}

func (o *APIKeyDeleted) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AuditLogInviteSentData - The payload used to create the invite.
type AuditLogInviteSentData struct {
	// The email invited to the organization.
	Email *string `json:"email,omitempty"`
	// The role the email was invited to be. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

func (o *AuditLogInviteSentData) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *AuditLogInviteSentData) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// InviteSent - The details for events with this `type`.
type InviteSent struct {
	// The ID of the invite.
	ID *string `json:"id,omitempty"`
	// The payload used to create the invite.
	Data *AuditLogInviteSentData `json:"data,omitempty"`
}

func (o *InviteSent) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InviteSent) GetData() *AuditLogInviteSentData {
	if o == nil {
		return nil
	}
	return o.Data
}

// InviteAccepted - The details for events with this `type`.
type InviteAccepted struct {
	// The ID of the invite.
	ID *string `json:"id,omitempty"`
}

func (o *InviteAccepted) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// InviteDeleted - The details for events with this `type`.
type InviteDeleted struct {
	// The ID of the invite.
	ID *string `json:"id,omitempty"`
}

func (o *InviteDeleted) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// LoginFailed - The details for events with this `type`.
type LoginFailed struct {
	// The error code of the failure.
	ErrorCode *string `json:"error_code,omitempty"`
	// The error message of the failure.
	ErrorMessage *string `json:"error_message,omitempty"`
}

func (o *LoginFailed) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *LoginFailed) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

// LogoutFailed - The details for events with this `type`.
type LogoutFailed struct {
	// The error code of the failure.
	ErrorCode *string `json:"error_code,omitempty"`
	// The error message of the failure.
	ErrorMessage *string `json:"error_message,omitempty"`
}

func (o *LogoutFailed) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *LogoutFailed) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

type Settings struct {
	// Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
	ThreadsUIVisibility *string `json:"threads_ui_visibility,omitempty"`
	// Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
	UsageDashboardVisibility *string `json:"usage_dashboard_visibility,omitempty"`
}

func (o *Settings) GetThreadsUIVisibility() *string {
	if o == nil {
		return nil
	}
	return o.ThreadsUIVisibility
}

func (o *Settings) GetUsageDashboardVisibility() *string {
	if o == nil {
		return nil
	}
	return o.UsageDashboardVisibility
}

// AuditLogChangesRequested - The payload used to update the organization settings.
type AuditLogChangesRequested struct {
	// The organization title.
	Title *string `json:"title,omitempty"`
	// The organization description.
	Description *string `json:"description,omitempty"`
	// The organization name.
	Name     *string   `json:"name,omitempty"`
	Settings *Settings `json:"settings,omitempty"`
}

func (o *AuditLogChangesRequested) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *AuditLogChangesRequested) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AuditLogChangesRequested) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AuditLogChangesRequested) GetSettings() *Settings {
	if o == nil {
		return nil
	}
	return o.Settings
}

// OrganizationUpdated - The details for events with this `type`.
type OrganizationUpdated struct {
	// The organization ID.
	ID *string `json:"id,omitempty"`
	// The payload used to update the organization settings.
	ChangesRequested *AuditLogChangesRequested `json:"changes_requested,omitempty"`
}

func (o *OrganizationUpdated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrganizationUpdated) GetChangesRequested() *AuditLogChangesRequested {
	if o == nil {
		return nil
	}
	return o.ChangesRequested
}

// AuditLogProjectCreatedData - The payload used to create the project.
type AuditLogProjectCreatedData struct {
	// The project name.
	Name *string `json:"name,omitempty"`
	// The title of the project as seen on the dashboard.
	Title *string `json:"title,omitempty"`
}

func (o *AuditLogProjectCreatedData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AuditLogProjectCreatedData) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// ProjectCreated - The details for events with this `type`.
type ProjectCreated struct {
	// The project ID.
	ID *string `json:"id,omitempty"`
	// The payload used to create the project.
	Data *AuditLogProjectCreatedData `json:"data,omitempty"`
}

func (o *ProjectCreated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProjectCreated) GetData() *AuditLogProjectCreatedData {
	if o == nil {
		return nil
	}
	return o.Data
}

// AuditLogProjectUpdatedChangesRequested - The payload used to update the project.
type AuditLogProjectUpdatedChangesRequested struct {
	// The title of the project as seen on the dashboard.
	Title *string `json:"title,omitempty"`
}

func (o *AuditLogProjectUpdatedChangesRequested) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// ProjectUpdated - The details for events with this `type`.
type ProjectUpdated struct {
	// The project ID.
	ID *string `json:"id,omitempty"`
	// The payload used to update the project.
	ChangesRequested *AuditLogProjectUpdatedChangesRequested `json:"changes_requested,omitempty"`
}

func (o *ProjectUpdated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProjectUpdated) GetChangesRequested() *AuditLogProjectUpdatedChangesRequested {
	if o == nil {
		return nil
	}
	return o.ChangesRequested
}

// ProjectArchived - The details for events with this `type`.
type ProjectArchived struct {
	// The project ID.
	ID *string `json:"id,omitempty"`
}

func (o *ProjectArchived) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AuditLogServiceAccountCreatedData - The payload used to create the service account.
type AuditLogServiceAccountCreatedData struct {
	// The role of the service account. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

func (o *AuditLogServiceAccountCreatedData) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// ServiceAccountCreated - The details for events with this `type`.
type ServiceAccountCreated struct {
	// The service account ID.
	ID *string `json:"id,omitempty"`
	// The payload used to create the service account.
	Data *AuditLogServiceAccountCreatedData `json:"data,omitempty"`
}

func (o *ServiceAccountCreated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServiceAccountCreated) GetData() *AuditLogServiceAccountCreatedData {
	if o == nil {
		return nil
	}
	return o.Data
}

// AuditLogServiceAccountUpdatedChangesRequested - The payload used to updated the service account.
type AuditLogServiceAccountUpdatedChangesRequested struct {
	// The role of the service account. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

func (o *AuditLogServiceAccountUpdatedChangesRequested) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// ServiceAccountUpdated - The details for events with this `type`.
type ServiceAccountUpdated struct {
	// The service account ID.
	ID *string `json:"id,omitempty"`
	// The payload used to updated the service account.
	ChangesRequested *AuditLogServiceAccountUpdatedChangesRequested `json:"changes_requested,omitempty"`
}

func (o *ServiceAccountUpdated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServiceAccountUpdated) GetChangesRequested() *AuditLogServiceAccountUpdatedChangesRequested {
	if o == nil {
		return nil
	}
	return o.ChangesRequested
}

// ServiceAccountDeleted - The details for events with this `type`.
type ServiceAccountDeleted struct {
	// The service account ID.
	ID *string `json:"id,omitempty"`
}

func (o *ServiceAccountDeleted) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AuditLogUserAddedData - The payload used to add the user to the project.
type AuditLogUserAddedData struct {
	// The role of the user. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

func (o *AuditLogUserAddedData) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// UserAdded - The details for events with this `type`.
type UserAdded struct {
	// The user ID.
	ID *string `json:"id,omitempty"`
	// The payload used to add the user to the project.
	Data *AuditLogUserAddedData `json:"data,omitempty"`
}

func (o *UserAdded) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserAdded) GetData() *AuditLogUserAddedData {
	if o == nil {
		return nil
	}
	return o.Data
}

// AuditLogUserUpdatedChangesRequested - The payload used to update the user.
type AuditLogUserUpdatedChangesRequested struct {
	// The role of the user. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

func (o *AuditLogUserUpdatedChangesRequested) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

// UserUpdated - The details for events with this `type`.
type UserUpdated struct {
	// The project ID.
	ID *string `json:"id,omitempty"`
	// The payload used to update the user.
	ChangesRequested *AuditLogUserUpdatedChangesRequested `json:"changes_requested,omitempty"`
}

func (o *UserUpdated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserUpdated) GetChangesRequested() *AuditLogUserUpdatedChangesRequested {
	if o == nil {
		return nil
	}
	return o.ChangesRequested
}

// UserDeleted - The details for events with this `type`.
type UserDeleted struct {
	// The user ID.
	ID *string `json:"id,omitempty"`
}

func (o *UserDeleted) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AuditLog - A log of a user action or configuration change within this organization.
type AuditLog struct {
	// The ID of this log.
	ID string `json:"id"`
	// The event type.
	Type AuditLogEventType `json:"type"`
	// The Unix timestamp (in seconds) of the event.
	EffectiveAt int64 `json:"effective_at"`
	// The project that the action was scoped to. Absent for actions not scoped to projects.
	Project *AuditLogProject `json:"project,omitempty"`
	// The actor who performed the audit logged action.
	Actor AuditLogActor `json:"actor"`
	// The details for events with this `type`.
	APIKeyCreated *APIKeyCreated `json:"api_key.created,omitempty"`
	// The details for events with this `type`.
	APIKeyUpdated *APIKeyUpdated `json:"api_key.updated,omitempty"`
	// The details for events with this `type`.
	APIKeyDeleted *APIKeyDeleted `json:"api_key.deleted,omitempty"`
	// The details for events with this `type`.
	InviteSent *InviteSent `json:"invite.sent,omitempty"`
	// The details for events with this `type`.
	InviteAccepted *InviteAccepted `json:"invite.accepted,omitempty"`
	// The details for events with this `type`.
	InviteDeleted *InviteDeleted `json:"invite.deleted,omitempty"`
	// The details for events with this `type`.
	LoginFailed *LoginFailed `json:"login.failed,omitempty"`
	// The details for events with this `type`.
	LogoutFailed *LogoutFailed `json:"logout.failed,omitempty"`
	// The details for events with this `type`.
	OrganizationUpdated *OrganizationUpdated `json:"organization.updated,omitempty"`
	// The details for events with this `type`.
	ProjectCreated *ProjectCreated `json:"project.created,omitempty"`
	// The details for events with this `type`.
	ProjectUpdated *ProjectUpdated `json:"project.updated,omitempty"`
	// The details for events with this `type`.
	ProjectArchived *ProjectArchived `json:"project.archived,omitempty"`
	// The details for events with this `type`.
	ServiceAccountCreated *ServiceAccountCreated `json:"service_account.created,omitempty"`
	// The details for events with this `type`.
	ServiceAccountUpdated *ServiceAccountUpdated `json:"service_account.updated,omitempty"`
	// The details for events with this `type`.
	ServiceAccountDeleted *ServiceAccountDeleted `json:"service_account.deleted,omitempty"`
	// The details for events with this `type`.
	UserAdded *UserAdded `json:"user.added,omitempty"`
	// The details for events with this `type`.
	UserUpdated *UserUpdated `json:"user.updated,omitempty"`
	// The details for events with this `type`.
	UserDeleted *UserDeleted `json:"user.deleted,omitempty"`
}

func (o *AuditLog) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AuditLog) GetType() AuditLogEventType {
	if o == nil {
		return AuditLogEventType("")
	}
	return o.Type
}

func (o *AuditLog) GetEffectiveAt() int64 {
	if o == nil {
		return 0
	}
	return o.EffectiveAt
}

func (o *AuditLog) GetProject() *AuditLogProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *AuditLog) GetActor() AuditLogActor {
	if o == nil {
		return AuditLogActor{}
	}
	return o.Actor
}

func (o *AuditLog) GetAPIKeyCreated() *APIKeyCreated {
	if o == nil {
		return nil
	}
	return o.APIKeyCreated
}

func (o *AuditLog) GetAPIKeyUpdated() *APIKeyUpdated {
	if o == nil {
		return nil
	}
	return o.APIKeyUpdated
}

func (o *AuditLog) GetAPIKeyDeleted() *APIKeyDeleted {
	if o == nil {
		return nil
	}
	return o.APIKeyDeleted
}

func (o *AuditLog) GetInviteSent() *InviteSent {
	if o == nil {
		return nil
	}
	return o.InviteSent
}

func (o *AuditLog) GetInviteAccepted() *InviteAccepted {
	if o == nil {
		return nil
	}
	return o.InviteAccepted
}

func (o *AuditLog) GetInviteDeleted() *InviteDeleted {
	if o == nil {
		return nil
	}
	return o.InviteDeleted
}

func (o *AuditLog) GetLoginFailed() *LoginFailed {
	if o == nil {
		return nil
	}
	return o.LoginFailed
}

func (o *AuditLog) GetLogoutFailed() *LogoutFailed {
	if o == nil {
		return nil
	}
	return o.LogoutFailed
}

func (o *AuditLog) GetOrganizationUpdated() *OrganizationUpdated {
	if o == nil {
		return nil
	}
	return o.OrganizationUpdated
}

func (o *AuditLog) GetProjectCreated() *ProjectCreated {
	if o == nil {
		return nil
	}
	return o.ProjectCreated
}

func (o *AuditLog) GetProjectUpdated() *ProjectUpdated {
	if o == nil {
		return nil
	}
	return o.ProjectUpdated
}

func (o *AuditLog) GetProjectArchived() *ProjectArchived {
	if o == nil {
		return nil
	}
	return o.ProjectArchived
}

func (o *AuditLog) GetServiceAccountCreated() *ServiceAccountCreated {
	if o == nil {
		return nil
	}
	return o.ServiceAccountCreated
}

func (o *AuditLog) GetServiceAccountUpdated() *ServiceAccountUpdated {
	if o == nil {
		return nil
	}
	return o.ServiceAccountUpdated
}

func (o *AuditLog) GetServiceAccountDeleted() *ServiceAccountDeleted {
	if o == nil {
		return nil
	}
	return o.ServiceAccountDeleted
}

func (o *AuditLog) GetUserAdded() *UserAdded {
	if o == nil {
		return nil
	}
	return o.UserAdded
}

func (o *AuditLog) GetUserUpdated() *UserUpdated {
	if o == nil {
		return nil
	}
	return o.UserUpdated
}

func (o *AuditLog) GetUserDeleted() *UserDeleted {
	if o == nil {
		return nil
	}
	return o.UserDeleted
}
