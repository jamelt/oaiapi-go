// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ProjectUserObject - The object type, which is always `organization.project.user`
type ProjectUserObject string

const (
	ProjectUserObjectOrganizationProjectUser ProjectUserObject = "organization.project.user"
)

func (e ProjectUserObject) ToPointer() *ProjectUserObject {
	return &e
}
func (e *ProjectUserObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization.project.user":
		*e = ProjectUserObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectUserObject: %v", v)
	}
}

// ProjectUserRole - `owner` or `member`
type ProjectUserRole string

const (
	ProjectUserRoleOwner  ProjectUserRole = "owner"
	ProjectUserRoleMember ProjectUserRole = "member"
)

func (e ProjectUserRole) ToPointer() *ProjectUserRole {
	return &e
}
func (e *ProjectUserRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		fallthrough
	case "member":
		*e = ProjectUserRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectUserRole: %v", v)
	}
}

// ProjectUser - Represents an individual user in a project.
type ProjectUser struct {
	// The object type, which is always `organization.project.user`
	Object ProjectUserObject `json:"object"`
	// The identifier, which can be referenced in API endpoints
	ID string `json:"id"`
	// The name of the user
	Name string `json:"name"`
	// The email address of the user
	Email string `json:"email"`
	// `owner` or `member`
	Role ProjectUserRole `json:"role"`
	// The Unix timestamp (in seconds) of when the project was added.
	AddedAt int64 `json:"added_at"`
}

func (o *ProjectUser) GetObject() ProjectUserObject {
	if o == nil {
		return ProjectUserObject("")
	}
	return o.Object
}

func (o *ProjectUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectUser) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ProjectUser) GetRole() ProjectUserRole {
	if o == nil {
		return ProjectUserRole("")
	}
	return o.Role
}

func (o *ProjectUser) GetAddedAt() int64 {
	if o == nil {
		return 0
	}
	return o.AddedAt
}
