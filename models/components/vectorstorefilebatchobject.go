// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// VectorStoreFileBatchObjectObject - The object type, which is always `vector_store.file_batch`.
type VectorStoreFileBatchObjectObject string

const (
	VectorStoreFileBatchObjectObjectVectorStoreFilesBatch VectorStoreFileBatchObjectObject = "vector_store.files_batch"
)

func (e VectorStoreFileBatchObjectObject) ToPointer() *VectorStoreFileBatchObjectObject {
	return &e
}
func (e *VectorStoreFileBatchObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vector_store.files_batch":
		*e = VectorStoreFileBatchObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VectorStoreFileBatchObjectObject: %v", v)
	}
}

// VectorStoreFileBatchObjectStatus - The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
type VectorStoreFileBatchObjectStatus string

const (
	VectorStoreFileBatchObjectStatusInProgress VectorStoreFileBatchObjectStatus = "in_progress"
	VectorStoreFileBatchObjectStatusCompleted  VectorStoreFileBatchObjectStatus = "completed"
	VectorStoreFileBatchObjectStatusCancelled  VectorStoreFileBatchObjectStatus = "cancelled"
	VectorStoreFileBatchObjectStatusFailed     VectorStoreFileBatchObjectStatus = "failed"
)

func (e VectorStoreFileBatchObjectStatus) ToPointer() *VectorStoreFileBatchObjectStatus {
	return &e
}
func (e *VectorStoreFileBatchObjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		*e = VectorStoreFileBatchObjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VectorStoreFileBatchObjectStatus: %v", v)
	}
}

type VectorStoreFileBatchObjectFileCounts struct {
	// The number of files that are currently being processed.
	InProgress int64 `json:"in_progress"`
	// The number of files that have been processed.
	Completed int64 `json:"completed"`
	// The number of files that have failed to process.
	Failed int64 `json:"failed"`
	// The number of files that where cancelled.
	Cancelled int64 `json:"cancelled"`
	// The total number of files.
	Total int64 `json:"total"`
}

func (o *VectorStoreFileBatchObjectFileCounts) GetInProgress() int64 {
	if o == nil {
		return 0
	}
	return o.InProgress
}

func (o *VectorStoreFileBatchObjectFileCounts) GetCompleted() int64 {
	if o == nil {
		return 0
	}
	return o.Completed
}

func (o *VectorStoreFileBatchObjectFileCounts) GetFailed() int64 {
	if o == nil {
		return 0
	}
	return o.Failed
}

func (o *VectorStoreFileBatchObjectFileCounts) GetCancelled() int64 {
	if o == nil {
		return 0
	}
	return o.Cancelled
}

func (o *VectorStoreFileBatchObjectFileCounts) GetTotal() int64 {
	if o == nil {
		return 0
	}
	return o.Total
}

// VectorStoreFileBatchObject - A batch of files attached to a vector store.
type VectorStoreFileBatchObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `vector_store.file_batch`.
	Object VectorStoreFileBatchObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the vector store files batch was created.
	CreatedAt int64 `json:"created_at"`
	// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
	VectorStoreID string `json:"vector_store_id"`
	// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
	Status     VectorStoreFileBatchObjectStatus     `json:"status"`
	FileCounts VectorStoreFileBatchObjectFileCounts `json:"file_counts"`
}

func (o *VectorStoreFileBatchObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VectorStoreFileBatchObject) GetObject() VectorStoreFileBatchObjectObject {
	if o == nil {
		return VectorStoreFileBatchObjectObject("")
	}
	return o.Object
}

func (o *VectorStoreFileBatchObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *VectorStoreFileBatchObject) GetVectorStoreID() string {
	if o == nil {
		return ""
	}
	return o.VectorStoreID
}

func (o *VectorStoreFileBatchObject) GetStatus() VectorStoreFileBatchObjectStatus {
	if o == nil {
		return VectorStoreFileBatchObjectStatus("")
	}
	return o.Status
}

func (o *VectorStoreFileBatchObject) GetFileCounts() VectorStoreFileBatchObjectFileCounts {
	if o == nil {
		return VectorStoreFileBatchObjectFileCounts{}
	}
	return o.FileCounts
}
