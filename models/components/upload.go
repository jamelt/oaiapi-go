// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UploadStatus - The status of the Upload.
type UploadStatus string

const (
	UploadStatusPending   UploadStatus = "pending"
	UploadStatusCompleted UploadStatus = "completed"
	UploadStatusCancelled UploadStatus = "cancelled"
	UploadStatusExpired   UploadStatus = "expired"
)

func (e UploadStatus) ToPointer() *UploadStatus {
	return &e
}
func (e *UploadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "cancelled":
		fallthrough
	case "expired":
		*e = UploadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadStatus: %v", v)
	}
}

// UploadObject - The object type, which is always "upload".
type UploadObject string

const (
	UploadObjectUpload UploadObject = "upload"
)

func (e UploadObject) ToPointer() *UploadObject {
	return &e
}
func (e *UploadObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "upload":
		*e = UploadObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadObject: %v", v)
	}
}

// The Upload object can accept byte chunks in the form of Parts.
type Upload struct {
	// The Upload unique identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The Unix timestamp (in seconds) for when the Upload was created.
	CreatedAt int64 `json:"created_at"`
	// The name of the file to be uploaded.
	Filename string `json:"filename"`
	// The intended number of bytes to be uploaded.
	Bytes int64 `json:"bytes"`
	// The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
	Purpose string `json:"purpose"`
	// The status of the Upload.
	Status UploadStatus `json:"status"`
	// The Unix timestamp (in seconds) for when the Upload was created.
	ExpiresAt int64 `json:"expires_at"`
	// The object type, which is always "upload".
	Object *UploadObject `json:"object,omitempty"`
	// The `File` object represents a document that has been uploaded to OpenAI.
	File *OpenAIFile `json:"file,omitempty"`
}

func (o *Upload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Upload) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *Upload) GetFilename() string {
	if o == nil {
		return ""
	}
	return o.Filename
}

func (o *Upload) GetBytes() int64 {
	if o == nil {
		return 0
	}
	return o.Bytes
}

func (o *Upload) GetPurpose() string {
	if o == nil {
		return ""
	}
	return o.Purpose
}

func (o *Upload) GetStatus() UploadStatus {
	if o == nil {
		return UploadStatus("")
	}
	return o.Status
}

func (o *Upload) GetExpiresAt() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresAt
}

func (o *Upload) GetObject() *UploadObject {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *Upload) GetFile() *OpenAIFile {
	if o == nil {
		return nil
	}
	return o.File
}
