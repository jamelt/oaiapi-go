// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// VectorStoreObjectObject - The object type, which is always `vector_store`.
type VectorStoreObjectObject string

const (
	VectorStoreObjectObjectVectorStore VectorStoreObjectObject = "vector_store"
)

func (e VectorStoreObjectObject) ToPointer() *VectorStoreObjectObject {
	return &e
}
func (e *VectorStoreObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vector_store":
		*e = VectorStoreObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VectorStoreObjectObject: %v", v)
	}
}

type FileCounts struct {
	// The number of files that are currently being processed.
	InProgress int64 `json:"in_progress"`
	// The number of files that have been successfully processed.
	Completed int64 `json:"completed"`
	// The number of files that have failed to process.
	Failed int64 `json:"failed"`
	// The number of files that were cancelled.
	Cancelled int64 `json:"cancelled"`
	// The total number of files.
	Total int64 `json:"total"`
}

func (o *FileCounts) GetInProgress() int64 {
	if o == nil {
		return 0
	}
	return o.InProgress
}

func (o *FileCounts) GetCompleted() int64 {
	if o == nil {
		return 0
	}
	return o.Completed
}

func (o *FileCounts) GetFailed() int64 {
	if o == nil {
		return 0
	}
	return o.Failed
}

func (o *FileCounts) GetCancelled() int64 {
	if o == nil {
		return 0
	}
	return o.Cancelled
}

func (o *FileCounts) GetTotal() int64 {
	if o == nil {
		return 0
	}
	return o.Total
}

// VectorStoreObjectStatus - The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
type VectorStoreObjectStatus string

const (
	VectorStoreObjectStatusExpired    VectorStoreObjectStatus = "expired"
	VectorStoreObjectStatusInProgress VectorStoreObjectStatus = "in_progress"
	VectorStoreObjectStatusCompleted  VectorStoreObjectStatus = "completed"
)

func (e VectorStoreObjectStatus) ToPointer() *VectorStoreObjectStatus {
	return &e
}
func (e *VectorStoreObjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expired":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		*e = VectorStoreObjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VectorStoreObjectStatus: %v", v)
	}
}

// VectorStoreObjectMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type VectorStoreObjectMetadata struct {
}

// VectorStoreObject - A vector store is a collection of processed files can be used by the `file_search` tool.
type VectorStoreObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `vector_store`.
	Object VectorStoreObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the vector store was created.
	CreatedAt int64 `json:"created_at"`
	// The name of the vector store.
	Name string `json:"name"`
	// The total number of bytes used by the files in the vector store.
	UsageBytes int64      `json:"usage_bytes"`
	FileCounts FileCounts `json:"file_counts"`
	// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
	Status VectorStoreObjectStatus `json:"status"`
	// The expiration policy for a vector store.
	ExpiresAfter *VectorStoreExpirationAfter `json:"expires_after,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store will expire.
	ExpiresAt *int64 `json:"expires_at,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store was last active.
	LastActiveAt *int64 `json:"last_active_at"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *VectorStoreObjectMetadata `json:"metadata"`
}

func (o *VectorStoreObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VectorStoreObject) GetObject() VectorStoreObjectObject {
	if o == nil {
		return VectorStoreObjectObject("")
	}
	return o.Object
}

func (o *VectorStoreObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *VectorStoreObject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *VectorStoreObject) GetUsageBytes() int64 {
	if o == nil {
		return 0
	}
	return o.UsageBytes
}

func (o *VectorStoreObject) GetFileCounts() FileCounts {
	if o == nil {
		return FileCounts{}
	}
	return o.FileCounts
}

func (o *VectorStoreObject) GetStatus() VectorStoreObjectStatus {
	if o == nil {
		return VectorStoreObjectStatus("")
	}
	return o.Status
}

func (o *VectorStoreObject) GetExpiresAfter() *VectorStoreExpirationAfter {
	if o == nil {
		return nil
	}
	return o.ExpiresAfter
}

func (o *VectorStoreObject) GetExpiresAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *VectorStoreObject) GetLastActiveAt() *int64 {
	if o == nil {
		return nil
	}
	return o.LastActiveAt
}

func (o *VectorStoreObject) GetMetadata() *VectorStoreObjectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}
