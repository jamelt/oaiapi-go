// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// ChatCompletionRequestToolMessageRole - The role of the messages author, in this case `tool`.
type ChatCompletionRequestToolMessageRole string

const (
	ChatCompletionRequestToolMessageRoleTool ChatCompletionRequestToolMessageRole = "tool"
)

func (e ChatCompletionRequestToolMessageRole) ToPointer() *ChatCompletionRequestToolMessageRole {
	return &e
}
func (e *ChatCompletionRequestToolMessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tool":
		*e = ChatCompletionRequestToolMessageRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionRequestToolMessageRole: %v", v)
	}
}

type ChatCompletionRequestToolMessageContentType string

const (
	ChatCompletionRequestToolMessageContentTypeStr                                                ChatCompletionRequestToolMessageContentType = "str"
	ChatCompletionRequestToolMessageContentTypeArrayOfChatCompletionRequestToolMessageContentPart ChatCompletionRequestToolMessageContentType = "arrayOfChatCompletionRequestToolMessageContentPart"
)

// ChatCompletionRequestToolMessageContent - The contents of the tool message.
type ChatCompletionRequestToolMessageContent struct {
	Str                                                *string
	ArrayOfChatCompletionRequestToolMessageContentPart []ChatCompletionRequestToolMessageContentPart

	Type ChatCompletionRequestToolMessageContentType
}

func CreateChatCompletionRequestToolMessageContentStr(str string) ChatCompletionRequestToolMessageContent {
	typ := ChatCompletionRequestToolMessageContentTypeStr

	return ChatCompletionRequestToolMessageContent{
		Str:  &str,
		Type: typ,
	}
}

func CreateChatCompletionRequestToolMessageContentArrayOfChatCompletionRequestToolMessageContentPart(arrayOfChatCompletionRequestToolMessageContentPart []ChatCompletionRequestToolMessageContentPart) ChatCompletionRequestToolMessageContent {
	typ := ChatCompletionRequestToolMessageContentTypeArrayOfChatCompletionRequestToolMessageContentPart

	return ChatCompletionRequestToolMessageContent{
		ArrayOfChatCompletionRequestToolMessageContentPart: arrayOfChatCompletionRequestToolMessageContentPart,
		Type: typ,
	}
}

func (u *ChatCompletionRequestToolMessageContent) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChatCompletionRequestToolMessageContentTypeStr
		return nil
	}

	var arrayOfChatCompletionRequestToolMessageContentPart []ChatCompletionRequestToolMessageContentPart = []ChatCompletionRequestToolMessageContentPart{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionRequestToolMessageContentPart, "", true, true); err == nil {
		u.ArrayOfChatCompletionRequestToolMessageContentPart = arrayOfChatCompletionRequestToolMessageContentPart
		u.Type = ChatCompletionRequestToolMessageContentTypeArrayOfChatCompletionRequestToolMessageContentPart
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionRequestToolMessageContent", string(data))
}

func (u ChatCompletionRequestToolMessageContent) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionRequestToolMessageContentPart != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionRequestToolMessageContentPart, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionRequestToolMessageContent: all fields are null")
}

type ChatCompletionRequestToolMessage struct {
	// The role of the messages author, in this case `tool`.
	Role ChatCompletionRequestToolMessageRole `json:"role"`
	// The contents of the tool message.
	Content ChatCompletionRequestToolMessageContent `json:"content"`
	// Tool call that this message is responding to.
	ToolCallID string `json:"tool_call_id"`
}

func (o *ChatCompletionRequestToolMessage) GetRole() ChatCompletionRequestToolMessageRole {
	if o == nil {
		return ChatCompletionRequestToolMessageRole("")
	}
	return o.Role
}

func (o *ChatCompletionRequestToolMessage) GetContent() ChatCompletionRequestToolMessageContent {
	if o == nil {
		return ChatCompletionRequestToolMessageContent{}
	}
	return o.Content
}

func (o *ChatCompletionRequestToolMessage) GetToolCallID() string {
	if o == nil {
		return ""
	}
	return o.ToolCallID
}
