// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ProjectListResponseObject string

const (
	ProjectListResponseObjectList ProjectListResponseObject = "list"
)

func (e ProjectListResponseObject) ToPointer() *ProjectListResponseObject {
	return &e
}
func (e *ProjectListResponseObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		*e = ProjectListResponseObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectListResponseObject: %v", v)
	}
}

type ProjectListResponse struct {
	Object  ProjectListResponseObject `json:"object"`
	Data    []Project                 `json:"data"`
	FirstID string                    `json:"first_id"`
	LastID  string                    `json:"last_id"`
	HasMore bool                      `json:"has_more"`
}

func (o *ProjectListResponse) GetObject() ProjectListResponseObject {
	if o == nil {
		return ProjectListResponseObject("")
	}
	return o.Object
}

func (o *ProjectListResponse) GetData() []Project {
	if o == nil {
		return []Project{}
	}
	return o.Data
}

func (o *ProjectListResponse) GetFirstID() string {
	if o == nil {
		return ""
	}
	return o.FirstID
}

func (o *ProjectListResponse) GetLastID() string {
	if o == nil {
		return ""
	}
	return o.LastID
}

func (o *ProjectListResponse) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}
