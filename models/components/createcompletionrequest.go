// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type CreateCompletionRequestModel2 string

const (
	CreateCompletionRequestModel2Gpt35TurboInstruct CreateCompletionRequestModel2 = "gpt-3.5-turbo-instruct"
	CreateCompletionRequestModel2Davinci002         CreateCompletionRequestModel2 = "davinci-002"
	CreateCompletionRequestModel2Babbage002         CreateCompletionRequestModel2 = "babbage-002"
)

func (e CreateCompletionRequestModel2) ToPointer() *CreateCompletionRequestModel2 {
	return &e
}
func (e *CreateCompletionRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gpt-3.5-turbo-instruct":
		fallthrough
	case "davinci-002":
		fallthrough
	case "babbage-002":
		*e = CreateCompletionRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompletionRequestModel2: %v", v)
	}
}

type CreateCompletionRequestModelType string

const (
	CreateCompletionRequestModelTypeStr                           CreateCompletionRequestModelType = "str"
	CreateCompletionRequestModelTypeCreateCompletionRequestModel2 CreateCompletionRequestModelType = "CreateCompletionRequest_model_2"
)

// CreateCompletionRequestModel - ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
type CreateCompletionRequestModel struct {
	Str                           *string
	CreateCompletionRequestModel2 *CreateCompletionRequestModel2

	Type CreateCompletionRequestModelType
}

func CreateCreateCompletionRequestModelStr(str string) CreateCompletionRequestModel {
	typ := CreateCompletionRequestModelTypeStr

	return CreateCompletionRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCompletionRequestModelCreateCompletionRequestModel2(createCompletionRequestModel2 CreateCompletionRequestModel2) CreateCompletionRequestModel {
	typ := CreateCompletionRequestModelTypeCreateCompletionRequestModel2

	return CreateCompletionRequestModel{
		CreateCompletionRequestModel2: &createCompletionRequestModel2,
		Type:                          typ,
	}
}

func (u *CreateCompletionRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateCompletionRequestModelTypeStr
		return nil
	}

	var createCompletionRequestModel2 CreateCompletionRequestModel2 = CreateCompletionRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createCompletionRequestModel2, "", true, true); err == nil {
		u.CreateCompletionRequestModel2 = &createCompletionRequestModel2
		u.Type = CreateCompletionRequestModelTypeCreateCompletionRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCompletionRequestModel", string(data))
}

func (u CreateCompletionRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateCompletionRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateCompletionRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCompletionRequestModel: all fields are null")
}

type PromptType string

const (
	PromptTypeStr                   PromptType = "str"
	PromptTypeArrayOfStr            PromptType = "arrayOfStr"
	PromptTypeArrayOfInteger        PromptType = "arrayOfInteger"
	PromptTypeArrayOfArrayOfInteger PromptType = "arrayOfArrayOfInteger"
)

// Prompt - The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
//
// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
type Prompt struct {
	Str                   *string
	ArrayOfStr            []string
	ArrayOfInteger        []int64
	ArrayOfArrayOfInteger [][]int64

	Type PromptType
}

func CreatePromptStr(str string) Prompt {
	typ := PromptTypeStr

	return Prompt{
		Str:  &str,
		Type: typ,
	}
}

func CreatePromptArrayOfStr(arrayOfStr []string) Prompt {
	typ := PromptTypeArrayOfStr

	return Prompt{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreatePromptArrayOfInteger(arrayOfInteger []int64) Prompt {
	typ := PromptTypeArrayOfInteger

	return Prompt{
		ArrayOfInteger: arrayOfInteger,
		Type:           typ,
	}
}

func CreatePromptArrayOfArrayOfInteger(arrayOfArrayOfInteger [][]int64) Prompt {
	typ := PromptTypeArrayOfArrayOfInteger

	return Prompt{
		ArrayOfArrayOfInteger: arrayOfArrayOfInteger,
		Type:                  typ,
	}
}

func (u *Prompt) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PromptTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = PromptTypeArrayOfStr
		return nil
	}

	var arrayOfInteger []int64 = []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfInteger, "", true, true); err == nil {
		u.ArrayOfInteger = arrayOfInteger
		u.Type = PromptTypeArrayOfInteger
		return nil
	}

	var arrayOfArrayOfInteger [][]int64 = [][]int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfArrayOfInteger, "", true, true); err == nil {
		u.ArrayOfArrayOfInteger = arrayOfArrayOfInteger
		u.Type = PromptTypeArrayOfArrayOfInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Prompt", string(data))
}

func (u Prompt) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfInteger != nil {
		return utils.MarshalJSON(u.ArrayOfInteger, "", true)
	}

	if u.ArrayOfArrayOfInteger != nil {
		return utils.MarshalJSON(u.ArrayOfArrayOfInteger, "", true)
	}

	return nil, errors.New("could not marshal union type Prompt: all fields are null")
}

type CreateCompletionRequestStopType string

const (
	CreateCompletionRequestStopTypeStr        CreateCompletionRequestStopType = "str"
	CreateCompletionRequestStopTypeArrayOfStr CreateCompletionRequestStopType = "arrayOfStr"
)

// CreateCompletionRequestStop - Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
type CreateCompletionRequestStop struct {
	Str        *string
	ArrayOfStr []string

	Type CreateCompletionRequestStopType
}

func CreateCreateCompletionRequestStopStr(str string) CreateCompletionRequestStop {
	typ := CreateCompletionRequestStopTypeStr

	return CreateCompletionRequestStop{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCompletionRequestStopArrayOfStr(arrayOfStr []string) CreateCompletionRequestStop {
	typ := CreateCompletionRequestStopTypeArrayOfStr

	return CreateCompletionRequestStop{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateCompletionRequestStop) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateCompletionRequestStopTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateCompletionRequestStopTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCompletionRequestStop", string(data))
}

func (u CreateCompletionRequestStop) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCompletionRequestStop: all fields are null")
}

type CreateCompletionRequest struct {
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
	//
	Model CreateCompletionRequestModel `json:"model"`
	// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
	//
	// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
	//
	Prompt *Prompt `json:"prompt"`
	// Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	//
	// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	//
	BestOf *int64 `default:"1" json:"best_of"`
	// Echo back the prompt in addition to the completion
	//
	Echo *bool `default:"false" json:"echo"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
	//
	FrequencyPenalty *float64 `default:"0" json:"frequency_penalty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
	//
	LogitBias map[string]int64 `json:"logit_bias,omitempty"`
	// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
	//
	// The maximum value for `logprobs` is 5.
	//
	Logprobs *int64 `default:"null" json:"logprobs"`
	// The maximum number of [tokens](/tokenizer) that can be generated in the completion.
	//
	// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	//
	MaxTokens *int64 `default:"16" json:"max_tokens"`
	// How many completions to generate for each prompt.
	//
	// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	//
	N *int64 `default:"1" json:"n"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
	//
	PresencePenalty *float64 `default:"0" json:"presence_penalty"`
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	//
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	//
	Seed *int64 `json:"seed,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	//
	Stop *CreateCompletionRequestStop `json:"stop,omitempty"`
	// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	//
	Stream *bool `default:"false" json:"stream"`
	// Options for streaming response. Only set this when you set `stream: true`.
	//
	StreamOptions *ChatCompletionStreamOptions `json:"stream_options,omitempty"`
	// The suffix that comes after a completion of inserted text.
	//
	// This parameter is only supported for `gpt-3.5-turbo-instruct`.
	//
	Suffix *string `default:"null" json:"suffix"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	//
	Temperature *float64 `default:"1" json:"temperature"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	//
	TopP *float64 `default:"1" json:"top_p"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
	//
	User *string `json:"user,omitempty"`
}

func (c CreateCompletionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateCompletionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateCompletionRequest) GetModel() CreateCompletionRequestModel {
	if o == nil {
		return CreateCompletionRequestModel{}
	}
	return o.Model
}

func (o *CreateCompletionRequest) GetPrompt() *Prompt {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *CreateCompletionRequest) GetBestOf() *int64 {
	if o == nil {
		return nil
	}
	return o.BestOf
}

func (o *CreateCompletionRequest) GetEcho() *bool {
	if o == nil {
		return nil
	}
	return o.Echo
}

func (o *CreateCompletionRequest) GetFrequencyPenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.FrequencyPenalty
}

func (o *CreateCompletionRequest) GetLogitBias() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.LogitBias
}

func (o *CreateCompletionRequest) GetLogprobs() *int64 {
	if o == nil {
		return nil
	}
	return o.Logprobs
}

func (o *CreateCompletionRequest) GetMaxTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxTokens
}

func (o *CreateCompletionRequest) GetN() *int64 {
	if o == nil {
		return nil
	}
	return o.N
}

func (o *CreateCompletionRequest) GetPresencePenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.PresencePenalty
}

func (o *CreateCompletionRequest) GetSeed() *int64 {
	if o == nil {
		return nil
	}
	return o.Seed
}

func (o *CreateCompletionRequest) GetStop() *CreateCompletionRequestStop {
	if o == nil {
		return nil
	}
	return o.Stop
}

func (o *CreateCompletionRequest) GetStream() *bool {
	if o == nil {
		return nil
	}
	return o.Stream
}

func (o *CreateCompletionRequest) GetStreamOptions() *ChatCompletionStreamOptions {
	if o == nil {
		return nil
	}
	return o.StreamOptions
}

func (o *CreateCompletionRequest) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *CreateCompletionRequest) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateCompletionRequest) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *CreateCompletionRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
