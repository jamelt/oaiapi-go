// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type CreateRunRequestModel2 string

const (
	CreateRunRequestModel2Gpt4o             CreateRunRequestModel2 = "gpt-4o"
	CreateRunRequestModel2Gpt4o20240806     CreateRunRequestModel2 = "gpt-4o-2024-08-06"
	CreateRunRequestModel2Gpt4o20240513     CreateRunRequestModel2 = "gpt-4o-2024-05-13"
	CreateRunRequestModel2Gpt4oMini         CreateRunRequestModel2 = "gpt-4o-mini"
	CreateRunRequestModel2Gpt4oMini20240718 CreateRunRequestModel2 = "gpt-4o-mini-2024-07-18"
	CreateRunRequestModel2Gpt4Turbo         CreateRunRequestModel2 = "gpt-4-turbo"
	CreateRunRequestModel2Gpt4Turbo20240409 CreateRunRequestModel2 = "gpt-4-turbo-2024-04-09"
	CreateRunRequestModel2Gpt40125Preview   CreateRunRequestModel2 = "gpt-4-0125-preview"
	CreateRunRequestModel2Gpt4TurboPreview  CreateRunRequestModel2 = "gpt-4-turbo-preview"
	CreateRunRequestModel2Gpt41106Preview   CreateRunRequestModel2 = "gpt-4-1106-preview"
	CreateRunRequestModel2Gpt4VisionPreview CreateRunRequestModel2 = "gpt-4-vision-preview"
	CreateRunRequestModel2Gpt4              CreateRunRequestModel2 = "gpt-4"
	CreateRunRequestModel2Gpt40314          CreateRunRequestModel2 = "gpt-4-0314"
	CreateRunRequestModel2Gpt40613          CreateRunRequestModel2 = "gpt-4-0613"
	CreateRunRequestModel2Gpt432k           CreateRunRequestModel2 = "gpt-4-32k"
	CreateRunRequestModel2Gpt432k0314       CreateRunRequestModel2 = "gpt-4-32k-0314"
	CreateRunRequestModel2Gpt432k0613       CreateRunRequestModel2 = "gpt-4-32k-0613"
	CreateRunRequestModel2Gpt35Turbo        CreateRunRequestModel2 = "gpt-3.5-turbo"
	CreateRunRequestModel2Gpt35Turbo16k     CreateRunRequestModel2 = "gpt-3.5-turbo-16k"
	CreateRunRequestModel2Gpt35Turbo0613    CreateRunRequestModel2 = "gpt-3.5-turbo-0613"
	CreateRunRequestModel2Gpt35Turbo1106    CreateRunRequestModel2 = "gpt-3.5-turbo-1106"
	CreateRunRequestModel2Gpt35Turbo0125    CreateRunRequestModel2 = "gpt-3.5-turbo-0125"
	CreateRunRequestModel2Gpt35Turbo16k0613 CreateRunRequestModel2 = "gpt-3.5-turbo-16k-0613"
)

func (e CreateRunRequestModel2) ToPointer() *CreateRunRequestModel2 {
	return &e
}
func (e *CreateRunRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gpt-4o":
		fallthrough
	case "gpt-4o-2024-08-06":
		fallthrough
	case "gpt-4o-2024-05-13":
		fallthrough
	case "gpt-4o-mini":
		fallthrough
	case "gpt-4o-mini-2024-07-18":
		fallthrough
	case "gpt-4-turbo":
		fallthrough
	case "gpt-4-turbo-2024-04-09":
		fallthrough
	case "gpt-4-0125-preview":
		fallthrough
	case "gpt-4-turbo-preview":
		fallthrough
	case "gpt-4-1106-preview":
		fallthrough
	case "gpt-4-vision-preview":
		fallthrough
	case "gpt-4":
		fallthrough
	case "gpt-4-0314":
		fallthrough
	case "gpt-4-0613":
		fallthrough
	case "gpt-4-32k":
		fallthrough
	case "gpt-4-32k-0314":
		fallthrough
	case "gpt-4-32k-0613":
		fallthrough
	case "gpt-3.5-turbo":
		fallthrough
	case "gpt-3.5-turbo-16k":
		fallthrough
	case "gpt-3.5-turbo-0613":
		fallthrough
	case "gpt-3.5-turbo-1106":
		fallthrough
	case "gpt-3.5-turbo-0125":
		fallthrough
	case "gpt-3.5-turbo-16k-0613":
		*e = CreateRunRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRunRequestModel2: %v", v)
	}
}

type CreateRunRequestModelType string

const (
	CreateRunRequestModelTypeStr                    CreateRunRequestModelType = "str"
	CreateRunRequestModelTypeCreateRunRequestModel2 CreateRunRequestModelType = "CreateRunRequest_model_2"
)

// CreateRunRequestModel - The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
type CreateRunRequestModel struct {
	Str                    *string
	CreateRunRequestModel2 *CreateRunRequestModel2

	Type CreateRunRequestModelType
}

func CreateCreateRunRequestModelStr(str string) CreateRunRequestModel {
	typ := CreateRunRequestModelTypeStr

	return CreateRunRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRunRequestModelCreateRunRequestModel2(createRunRequestModel2 CreateRunRequestModel2) CreateRunRequestModel {
	typ := CreateRunRequestModelTypeCreateRunRequestModel2

	return CreateRunRequestModel{
		CreateRunRequestModel2: &createRunRequestModel2,
		Type:                   typ,
	}
}

func (u *CreateRunRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRunRequestModelTypeStr
		return nil
	}

	var createRunRequestModel2 CreateRunRequestModel2 = CreateRunRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createRunRequestModel2, "", true, true); err == nil {
		u.CreateRunRequestModel2 = &createRunRequestModel2
		u.Type = CreateRunRequestModelTypeCreateRunRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRunRequestModel", string(data))
}

func (u CreateRunRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRunRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateRunRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRunRequestModel: all fields are null")
}

type CreateRunRequestToolsType string

const (
	CreateRunRequestToolsTypeAssistantToolsCode       CreateRunRequestToolsType = "AssistantToolsCode"
	CreateRunRequestToolsTypeAssistantToolsFileSearch CreateRunRequestToolsType = "AssistantToolsFileSearch"
	CreateRunRequestToolsTypeAssistantToolsFunction   CreateRunRequestToolsType = "AssistantToolsFunction"
)

type CreateRunRequestTools struct {
	AssistantToolsCode       *AssistantToolsCode
	AssistantToolsFileSearch *AssistantToolsFileSearch
	AssistantToolsFunction   *AssistantToolsFunction

	Type CreateRunRequestToolsType
}

func CreateCreateRunRequestToolsAssistantToolsCode(assistantToolsCode AssistantToolsCode) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeAssistantToolsCode

	return CreateRunRequestTools{
		AssistantToolsCode: &assistantToolsCode,
		Type:               typ,
	}
}

func CreateCreateRunRequestToolsAssistantToolsFileSearch(assistantToolsFileSearch AssistantToolsFileSearch) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeAssistantToolsFileSearch

	return CreateRunRequestTools{
		AssistantToolsFileSearch: &assistantToolsFileSearch,
		Type:                     typ,
	}
}

func CreateCreateRunRequestToolsAssistantToolsFunction(assistantToolsFunction AssistantToolsFunction) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeAssistantToolsFunction

	return CreateRunRequestTools{
		AssistantToolsFunction: &assistantToolsFunction,
		Type:                   typ,
	}
}

func (u *CreateRunRequestTools) UnmarshalJSON(data []byte) error {

	var assistantToolsCode AssistantToolsCode = AssistantToolsCode{}
	if err := utils.UnmarshalJSON(data, &assistantToolsCode, "", true, true); err == nil {
		u.AssistantToolsCode = &assistantToolsCode
		u.Type = CreateRunRequestToolsTypeAssistantToolsCode
		return nil
	}

	var assistantToolsFileSearch AssistantToolsFileSearch = AssistantToolsFileSearch{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFileSearch, "", true, true); err == nil {
		u.AssistantToolsFileSearch = &assistantToolsFileSearch
		u.Type = CreateRunRequestToolsTypeAssistantToolsFileSearch
		return nil
	}

	var assistantToolsFunction AssistantToolsFunction = AssistantToolsFunction{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFunction, "", true, true); err == nil {
		u.AssistantToolsFunction = &assistantToolsFunction
		u.Type = CreateRunRequestToolsTypeAssistantToolsFunction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRunRequestTools", string(data))
}

func (u CreateRunRequestTools) MarshalJSON() ([]byte, error) {
	if u.AssistantToolsCode != nil {
		return utils.MarshalJSON(u.AssistantToolsCode, "", true)
	}

	if u.AssistantToolsFileSearch != nil {
		return utils.MarshalJSON(u.AssistantToolsFileSearch, "", true)
	}

	if u.AssistantToolsFunction != nil {
		return utils.MarshalJSON(u.AssistantToolsFunction, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRunRequestTools: all fields are null")
}

// CreateRunRequestMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type CreateRunRequestMetadata struct {
}

type CreateRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantID string `json:"assistant_id"`
	// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *CreateRunRequestModel `json:"model,omitempty"`
	// Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions,omitempty"`
	// Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Adds additional messages to the thread before creating the run.
	AdditionalMessages []CreateMessageRequest `json:"additional_messages,omitempty"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools []CreateRunRequestTools `json:"tools,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *CreateRunRequestMetadata `json:"metadata,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	Temperature *float64 `default:"1" json:"temperature"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or temperature but not both.
	//
	TopP *float64 `default:"1" json:"top_p"`
	// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	//
	Stream *bool `json:"stream,omitempty"`
	// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
	//
	MaxPromptTokens *int64 `json:"max_prompt_tokens,omitempty"`
	// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
	//
	MaxCompletionTokens *int64 `json:"max_completion_tokens,omitempty"`
	// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
	TruncationStrategy *TruncationObject `json:"truncation_strategy,omitempty"`
	// Controls which (if any) tool is called by the model.
	// `none` means the model will not call any tools and instead generates a message.
	// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
	// `required` means the model must call one or more tools before responding to the user.
	// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	//
	ToolChoice *AssistantsAPIToolChoiceOption `json:"tool_choice,omitempty"`
	// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
	ParallelToolCalls *bool `default:"true" json:"parallel_tool_calls"`
	// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	//
	ResponseFormat *AssistantsAPIResponseFormatOption `json:"response_format,omitempty"`
}

func (c CreateRunRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRunRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRunRequest) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *CreateRunRequest) GetModel() *CreateRunRequestModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateRunRequest) GetInstructions() *string {
	if o == nil {
		return nil
	}
	return o.Instructions
}

func (o *CreateRunRequest) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *CreateRunRequest) GetAdditionalMessages() []CreateMessageRequest {
	if o == nil {
		return nil
	}
	return o.AdditionalMessages
}

func (o *CreateRunRequest) GetTools() []CreateRunRequestTools {
	if o == nil {
		return nil
	}
	return o.Tools
}

func (o *CreateRunRequest) GetMetadata() *CreateRunRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateRunRequest) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateRunRequest) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *CreateRunRequest) GetStream() *bool {
	if o == nil {
		return nil
	}
	return o.Stream
}

func (o *CreateRunRequest) GetMaxPromptTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPromptTokens
}

func (o *CreateRunRequest) GetMaxCompletionTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxCompletionTokens
}

func (o *CreateRunRequest) GetTruncationStrategy() *TruncationObject {
	if o == nil {
		return nil
	}
	return o.TruncationStrategy
}

func (o *CreateRunRequest) GetToolChoice() *AssistantsAPIToolChoiceOption {
	if o == nil {
		return nil
	}
	return o.ToolChoice
}

func (o *CreateRunRequest) GetParallelToolCalls() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelToolCalls
}

func (o *CreateRunRequest) GetResponseFormat() *AssistantsAPIResponseFormatOption {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}
