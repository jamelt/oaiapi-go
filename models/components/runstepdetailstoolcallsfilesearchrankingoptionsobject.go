// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker - The ranker used for the file search.
type RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker string

const (
	RunStepDetailsToolCallsFileSearchRankingOptionsObjectRankerDefault20240821 RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker = "default_2024_08_21"
)

func (e RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker) ToPointer() *RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker {
	return &e
}
func (e *RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default_2024_08_21":
		*e = RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker: %v", v)
	}
}

// RunStepDetailsToolCallsFileSearchRankingOptionsObject - The ranking options for the file search.
type RunStepDetailsToolCallsFileSearchRankingOptionsObject struct {
	// The ranker used for the file search.
	Ranker RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker `json:"ranker"`
	// The score threshold for the file search. All values must be a floating point number between 0 and 1.
	ScoreThreshold float64 `json:"score_threshold"`
}

func (o *RunStepDetailsToolCallsFileSearchRankingOptionsObject) GetRanker() RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker {
	if o == nil {
		return RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker("")
	}
	return o.Ranker
}

func (o *RunStepDetailsToolCallsFileSearchRankingOptionsObject) GetScoreThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.ScoreThreshold
}
