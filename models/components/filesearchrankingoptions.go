// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Ranker - The ranker to use for the file search. If not specified will use the `auto` ranker.
type Ranker string

const (
	RankerAuto            Ranker = "auto"
	RankerDefault20240821 Ranker = "default_2024_08_21"
)

func (e Ranker) ToPointer() *Ranker {
	return &e
}
func (e *Ranker) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "default_2024_08_21":
		*e = Ranker(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ranker: %v", v)
	}
}

// FileSearchRankingOptions - The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
//
// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
type FileSearchRankingOptions struct {
	// The ranker to use for the file search. If not specified will use the `auto` ranker.
	Ranker *Ranker `json:"ranker,omitempty"`
	// The score threshold for the file search. All values must be a floating point number between 0 and 1.
	ScoreThreshold float64 `json:"score_threshold"`
}

func (o *FileSearchRankingOptions) GetRanker() *Ranker {
	if o == nil {
		return nil
	}
	return o.Ranker
}

func (o *FileSearchRankingOptions) GetScoreThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.ScoreThreshold
}
