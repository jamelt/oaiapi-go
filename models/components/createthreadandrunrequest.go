// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

type CreateThreadAndRunRequestModel2 string

const (
	CreateThreadAndRunRequestModel2Gpt4o             CreateThreadAndRunRequestModel2 = "gpt-4o"
	CreateThreadAndRunRequestModel2Gpt4o20240806     CreateThreadAndRunRequestModel2 = "gpt-4o-2024-08-06"
	CreateThreadAndRunRequestModel2Gpt4o20240513     CreateThreadAndRunRequestModel2 = "gpt-4o-2024-05-13"
	CreateThreadAndRunRequestModel2Gpt4oMini         CreateThreadAndRunRequestModel2 = "gpt-4o-mini"
	CreateThreadAndRunRequestModel2Gpt4oMini20240718 CreateThreadAndRunRequestModel2 = "gpt-4o-mini-2024-07-18"
	CreateThreadAndRunRequestModel2Gpt4Turbo         CreateThreadAndRunRequestModel2 = "gpt-4-turbo"
	CreateThreadAndRunRequestModel2Gpt4Turbo20240409 CreateThreadAndRunRequestModel2 = "gpt-4-turbo-2024-04-09"
	CreateThreadAndRunRequestModel2Gpt40125Preview   CreateThreadAndRunRequestModel2 = "gpt-4-0125-preview"
	CreateThreadAndRunRequestModel2Gpt4TurboPreview  CreateThreadAndRunRequestModel2 = "gpt-4-turbo-preview"
	CreateThreadAndRunRequestModel2Gpt41106Preview   CreateThreadAndRunRequestModel2 = "gpt-4-1106-preview"
	CreateThreadAndRunRequestModel2Gpt4VisionPreview CreateThreadAndRunRequestModel2 = "gpt-4-vision-preview"
	CreateThreadAndRunRequestModel2Gpt4              CreateThreadAndRunRequestModel2 = "gpt-4"
	CreateThreadAndRunRequestModel2Gpt40314          CreateThreadAndRunRequestModel2 = "gpt-4-0314"
	CreateThreadAndRunRequestModel2Gpt40613          CreateThreadAndRunRequestModel2 = "gpt-4-0613"
	CreateThreadAndRunRequestModel2Gpt432k           CreateThreadAndRunRequestModel2 = "gpt-4-32k"
	CreateThreadAndRunRequestModel2Gpt432k0314       CreateThreadAndRunRequestModel2 = "gpt-4-32k-0314"
	CreateThreadAndRunRequestModel2Gpt432k0613       CreateThreadAndRunRequestModel2 = "gpt-4-32k-0613"
	CreateThreadAndRunRequestModel2Gpt35Turbo        CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo"
	CreateThreadAndRunRequestModel2Gpt35Turbo16k     CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo-16k"
	CreateThreadAndRunRequestModel2Gpt35Turbo0613    CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo-0613"
	CreateThreadAndRunRequestModel2Gpt35Turbo1106    CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo-1106"
	CreateThreadAndRunRequestModel2Gpt35Turbo0125    CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo-0125"
	CreateThreadAndRunRequestModel2Gpt35Turbo16k0613 CreateThreadAndRunRequestModel2 = "gpt-3.5-turbo-16k-0613"
)

func (e CreateThreadAndRunRequestModel2) ToPointer() *CreateThreadAndRunRequestModel2 {
	return &e
}
func (e *CreateThreadAndRunRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gpt-4o":
		fallthrough
	case "gpt-4o-2024-08-06":
		fallthrough
	case "gpt-4o-2024-05-13":
		fallthrough
	case "gpt-4o-mini":
		fallthrough
	case "gpt-4o-mini-2024-07-18":
		fallthrough
	case "gpt-4-turbo":
		fallthrough
	case "gpt-4-turbo-2024-04-09":
		fallthrough
	case "gpt-4-0125-preview":
		fallthrough
	case "gpt-4-turbo-preview":
		fallthrough
	case "gpt-4-1106-preview":
		fallthrough
	case "gpt-4-vision-preview":
		fallthrough
	case "gpt-4":
		fallthrough
	case "gpt-4-0314":
		fallthrough
	case "gpt-4-0613":
		fallthrough
	case "gpt-4-32k":
		fallthrough
	case "gpt-4-32k-0314":
		fallthrough
	case "gpt-4-32k-0613":
		fallthrough
	case "gpt-3.5-turbo":
		fallthrough
	case "gpt-3.5-turbo-16k":
		fallthrough
	case "gpt-3.5-turbo-0613":
		fallthrough
	case "gpt-3.5-turbo-1106":
		fallthrough
	case "gpt-3.5-turbo-0125":
		fallthrough
	case "gpt-3.5-turbo-16k-0613":
		*e = CreateThreadAndRunRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateThreadAndRunRequestModel2: %v", v)
	}
}

type CreateThreadAndRunRequestModelType string

const (
	CreateThreadAndRunRequestModelTypeStr                             CreateThreadAndRunRequestModelType = "str"
	CreateThreadAndRunRequestModelTypeCreateThreadAndRunRequestModel2 CreateThreadAndRunRequestModelType = "CreateThreadAndRunRequest_model_2"
)

// CreateThreadAndRunRequestModel - The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
type CreateThreadAndRunRequestModel struct {
	Str                             *string
	CreateThreadAndRunRequestModel2 *CreateThreadAndRunRequestModel2

	Type CreateThreadAndRunRequestModelType
}

func CreateCreateThreadAndRunRequestModelStr(str string) CreateThreadAndRunRequestModel {
	typ := CreateThreadAndRunRequestModelTypeStr

	return CreateThreadAndRunRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateThreadAndRunRequestModelCreateThreadAndRunRequestModel2(createThreadAndRunRequestModel2 CreateThreadAndRunRequestModel2) CreateThreadAndRunRequestModel {
	typ := CreateThreadAndRunRequestModelTypeCreateThreadAndRunRequestModel2

	return CreateThreadAndRunRequestModel{
		CreateThreadAndRunRequestModel2: &createThreadAndRunRequestModel2,
		Type:                            typ,
	}
}

func (u *CreateThreadAndRunRequestModel) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateThreadAndRunRequestModelTypeStr
		return nil
	}

	var createThreadAndRunRequestModel2 CreateThreadAndRunRequestModel2 = CreateThreadAndRunRequestModel2("")
	if err := utils.UnmarshalJSON(data, &createThreadAndRunRequestModel2, "", true, true); err == nil {
		u.CreateThreadAndRunRequestModel2 = &createThreadAndRunRequestModel2
		u.Type = CreateThreadAndRunRequestModelTypeCreateThreadAndRunRequestModel2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateThreadAndRunRequestModel", string(data))
}

func (u CreateThreadAndRunRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateThreadAndRunRequestModel2 != nil {
		return utils.MarshalJSON(u.CreateThreadAndRunRequestModel2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateThreadAndRunRequestModel: all fields are null")
}

type CreateThreadAndRunRequestToolsType string

const (
	CreateThreadAndRunRequestToolsTypeAssistantToolsCode       CreateThreadAndRunRequestToolsType = "AssistantToolsCode"
	CreateThreadAndRunRequestToolsTypeAssistantToolsFileSearch CreateThreadAndRunRequestToolsType = "AssistantToolsFileSearch"
	CreateThreadAndRunRequestToolsTypeAssistantToolsFunction   CreateThreadAndRunRequestToolsType = "AssistantToolsFunction"
)

type CreateThreadAndRunRequestTools struct {
	AssistantToolsCode       *AssistantToolsCode
	AssistantToolsFileSearch *AssistantToolsFileSearch
	AssistantToolsFunction   *AssistantToolsFunction

	Type CreateThreadAndRunRequestToolsType
}

func CreateCreateThreadAndRunRequestToolsAssistantToolsCode(assistantToolsCode AssistantToolsCode) CreateThreadAndRunRequestTools {
	typ := CreateThreadAndRunRequestToolsTypeAssistantToolsCode

	return CreateThreadAndRunRequestTools{
		AssistantToolsCode: &assistantToolsCode,
		Type:               typ,
	}
}

func CreateCreateThreadAndRunRequestToolsAssistantToolsFileSearch(assistantToolsFileSearch AssistantToolsFileSearch) CreateThreadAndRunRequestTools {
	typ := CreateThreadAndRunRequestToolsTypeAssistantToolsFileSearch

	return CreateThreadAndRunRequestTools{
		AssistantToolsFileSearch: &assistantToolsFileSearch,
		Type:                     typ,
	}
}

func CreateCreateThreadAndRunRequestToolsAssistantToolsFunction(assistantToolsFunction AssistantToolsFunction) CreateThreadAndRunRequestTools {
	typ := CreateThreadAndRunRequestToolsTypeAssistantToolsFunction

	return CreateThreadAndRunRequestTools{
		AssistantToolsFunction: &assistantToolsFunction,
		Type:                   typ,
	}
}

func (u *CreateThreadAndRunRequestTools) UnmarshalJSON(data []byte) error {

	var assistantToolsCode AssistantToolsCode = AssistantToolsCode{}
	if err := utils.UnmarshalJSON(data, &assistantToolsCode, "", true, true); err == nil {
		u.AssistantToolsCode = &assistantToolsCode
		u.Type = CreateThreadAndRunRequestToolsTypeAssistantToolsCode
		return nil
	}

	var assistantToolsFileSearch AssistantToolsFileSearch = AssistantToolsFileSearch{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFileSearch, "", true, true); err == nil {
		u.AssistantToolsFileSearch = &assistantToolsFileSearch
		u.Type = CreateThreadAndRunRequestToolsTypeAssistantToolsFileSearch
		return nil
	}

	var assistantToolsFunction AssistantToolsFunction = AssistantToolsFunction{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFunction, "", true, true); err == nil {
		u.AssistantToolsFunction = &assistantToolsFunction
		u.Type = CreateThreadAndRunRequestToolsTypeAssistantToolsFunction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateThreadAndRunRequestTools", string(data))
}

func (u CreateThreadAndRunRequestTools) MarshalJSON() ([]byte, error) {
	if u.AssistantToolsCode != nil {
		return utils.MarshalJSON(u.AssistantToolsCode, "", true)
	}

	if u.AssistantToolsFileSearch != nil {
		return utils.MarshalJSON(u.AssistantToolsFileSearch, "", true)
	}

	if u.AssistantToolsFunction != nil {
		return utils.MarshalJSON(u.AssistantToolsFunction, "", true)
	}

	return nil, errors.New("could not marshal union type CreateThreadAndRunRequestTools: all fields are null")
}

type CreateThreadAndRunRequestCodeInterpreter struct {
	// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
	//
	FileIds []string `json:"file_ids,omitempty"`
}

func (o *CreateThreadAndRunRequestCodeInterpreter) GetFileIds() []string {
	if o == nil {
		return nil
	}
	return o.FileIds
}

type CreateThreadAndRunRequestFileSearch struct {
	// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
	//
	VectorStoreIds []string `json:"vector_store_ids,omitempty"`
}

func (o *CreateThreadAndRunRequestFileSearch) GetVectorStoreIds() []string {
	if o == nil {
		return nil
	}
	return o.VectorStoreIds
}

// CreateThreadAndRunRequestToolResources - A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
type CreateThreadAndRunRequestToolResources struct {
	CodeInterpreter *CreateThreadAndRunRequestCodeInterpreter `json:"code_interpreter,omitempty"`
	FileSearch      *CreateThreadAndRunRequestFileSearch      `json:"file_search,omitempty"`
}

func (o *CreateThreadAndRunRequestToolResources) GetCodeInterpreter() *CreateThreadAndRunRequestCodeInterpreter {
	if o == nil {
		return nil
	}
	return o.CodeInterpreter
}

func (o *CreateThreadAndRunRequestToolResources) GetFileSearch() *CreateThreadAndRunRequestFileSearch {
	if o == nil {
		return nil
	}
	return o.FileSearch
}

// CreateThreadAndRunRequestMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
type CreateThreadAndRunRequestMetadata struct {
}

type CreateThreadAndRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantID string               `json:"assistant_id"`
	Thread      *CreateThreadRequest `json:"thread,omitempty"`
	// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *CreateThreadAndRunRequestModel `json:"model,omitempty"`
	// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions,omitempty"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools []CreateThreadAndRunRequestTools `json:"tools,omitempty"`
	// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
	//
	ToolResources *CreateThreadAndRunRequestToolResources `json:"tool_resources,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
	//
	Metadata *CreateThreadAndRunRequestMetadata `json:"metadata,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	Temperature *float64 `default:"1" json:"temperature"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or temperature but not both.
	//
	TopP *float64 `default:"1" json:"top_p"`
	// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
	//
	Stream *bool `json:"stream,omitempty"`
	// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
	//
	MaxPromptTokens *int64 `json:"max_prompt_tokens,omitempty"`
	// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
	//
	MaxCompletionTokens *int64 `json:"max_completion_tokens,omitempty"`
	// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
	TruncationStrategy *TruncationObject `json:"truncation_strategy,omitempty"`
	// Controls which (if any) tool is called by the model.
	// `none` means the model will not call any tools and instead generates a message.
	// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
	// `required` means the model must call one or more tools before responding to the user.
	// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
	//
	ToolChoice *AssistantsAPIToolChoiceOption `json:"tool_choice,omitempty"`
	// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
	ParallelToolCalls *bool `default:"true" json:"parallel_tool_calls"`
	// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
	//
	ResponseFormat *AssistantsAPIResponseFormatOption `json:"response_format,omitempty"`
}

func (c CreateThreadAndRunRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateThreadAndRunRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateThreadAndRunRequest) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *CreateThreadAndRunRequest) GetThread() *CreateThreadRequest {
	if o == nil {
		return nil
	}
	return o.Thread
}

func (o *CreateThreadAndRunRequest) GetModel() *CreateThreadAndRunRequestModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateThreadAndRunRequest) GetInstructions() *string {
	if o == nil {
		return nil
	}
	return o.Instructions
}

func (o *CreateThreadAndRunRequest) GetTools() []CreateThreadAndRunRequestTools {
	if o == nil {
		return nil
	}
	return o.Tools
}

func (o *CreateThreadAndRunRequest) GetToolResources() *CreateThreadAndRunRequestToolResources {
	if o == nil {
		return nil
	}
	return o.ToolResources
}

func (o *CreateThreadAndRunRequest) GetMetadata() *CreateThreadAndRunRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateThreadAndRunRequest) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateThreadAndRunRequest) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *CreateThreadAndRunRequest) GetStream() *bool {
	if o == nil {
		return nil
	}
	return o.Stream
}

func (o *CreateThreadAndRunRequest) GetMaxPromptTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxPromptTokens
}

func (o *CreateThreadAndRunRequest) GetMaxCompletionTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxCompletionTokens
}

func (o *CreateThreadAndRunRequest) GetTruncationStrategy() *TruncationObject {
	if o == nil {
		return nil
	}
	return o.TruncationStrategy
}

func (o *CreateThreadAndRunRequest) GetToolChoice() *AssistantsAPIToolChoiceOption {
	if o == nil {
		return nil
	}
	return o.ToolChoice
}

func (o *CreateThreadAndRunRequest) GetParallelToolCalls() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelToolCalls
}

func (o *CreateThreadAndRunRequest) GetResponseFormat() *AssistantsAPIResponseFormatOption {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}
