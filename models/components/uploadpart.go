// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UploadPartObject - The object type, which is always `upload.part`.
type UploadPartObject string

const (
	UploadPartObjectUploadPart UploadPartObject = "upload.part"
)

func (e UploadPartObject) ToPointer() *UploadPartObject {
	return &e
}
func (e *UploadPartObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "upload.part":
		*e = UploadPartObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadPartObject: %v", v)
	}
}

// UploadPart - The upload Part represents a chunk of bytes we can add to an Upload object.
type UploadPart struct {
	// The upload Part unique identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The Unix timestamp (in seconds) for when the Part was created.
	CreatedAt int64 `json:"created_at"`
	// The ID of the Upload object that this Part was added to.
	UploadID string `json:"upload_id"`
	// The object type, which is always `upload.part`.
	Object UploadPartObject `json:"object"`
}

func (o *UploadPart) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UploadPart) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UploadPart) GetUploadID() string {
	if o == nil {
		return ""
	}
	return o.UploadID
}

func (o *UploadPart) GetObject() UploadPartObject {
	if o == nil {
		return UploadPartObject("")
	}
	return o.Object
}
