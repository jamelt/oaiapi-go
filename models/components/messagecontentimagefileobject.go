// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
)

// MessageContentImageFileObjectType - Always `image_file`.
type MessageContentImageFileObjectType string

const (
	MessageContentImageFileObjectTypeImageFile MessageContentImageFileObjectType = "image_file"
)

func (e MessageContentImageFileObjectType) ToPointer() *MessageContentImageFileObjectType {
	return &e
}
func (e *MessageContentImageFileObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image_file":
		*e = MessageContentImageFileObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageContentImageFileObjectType: %v", v)
	}
}

// MessageContentImageFileObjectDetail - Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
type MessageContentImageFileObjectDetail string

const (
	MessageContentImageFileObjectDetailAuto MessageContentImageFileObjectDetail = "auto"
	MessageContentImageFileObjectDetailLow  MessageContentImageFileObjectDetail = "low"
	MessageContentImageFileObjectDetailHigh MessageContentImageFileObjectDetail = "high"
)

func (e MessageContentImageFileObjectDetail) ToPointer() *MessageContentImageFileObjectDetail {
	return &e
}
func (e *MessageContentImageFileObjectDetail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "low":
		fallthrough
	case "high":
		*e = MessageContentImageFileObjectDetail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageContentImageFileObjectDetail: %v", v)
	}
}

type ImageFile struct {
	// The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
	FileID string `json:"file_id"`
	// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
	Detail *MessageContentImageFileObjectDetail `default:"auto" json:"detail"`
}

func (i ImageFile) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *ImageFile) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ImageFile) GetFileID() string {
	if o == nil {
		return ""
	}
	return o.FileID
}

func (o *ImageFile) GetDetail() *MessageContentImageFileObjectDetail {
	if o == nil {
		return nil
	}
	return o.Detail
}

// MessageContentImageFileObject - References an image [File](/docs/api-reference/files) in the content of a message.
type MessageContentImageFileObject struct {
	// Always `image_file`.
	Type      MessageContentImageFileObjectType `json:"type"`
	ImageFile ImageFile                         `json:"image_file"`
}

func (o *MessageContentImageFileObject) GetType() MessageContentImageFileObjectType {
	if o == nil {
		return MessageContentImageFileObjectType("")
	}
	return o.Type
}

func (o *MessageContentImageFileObject) GetImageFile() ImageFile {
	if o == nil {
		return ImageFile{}
	}
	return o.ImageFile
}
