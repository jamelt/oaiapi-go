// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
	"github.com/jamelt/openai-api/models/components"
)

// ListFilesInVectorStoreBatchQueryParamOrder - Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
type ListFilesInVectorStoreBatchQueryParamOrder string

const (
	ListFilesInVectorStoreBatchQueryParamOrderAsc  ListFilesInVectorStoreBatchQueryParamOrder = "asc"
	ListFilesInVectorStoreBatchQueryParamOrderDesc ListFilesInVectorStoreBatchQueryParamOrder = "desc"
)

func (e ListFilesInVectorStoreBatchQueryParamOrder) ToPointer() *ListFilesInVectorStoreBatchQueryParamOrder {
	return &e
}
func (e *ListFilesInVectorStoreBatchQueryParamOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListFilesInVectorStoreBatchQueryParamOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFilesInVectorStoreBatchQueryParamOrder: %v", v)
	}
}

// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
type Filter string

const (
	FilterInProgress Filter = "in_progress"
	FilterCompleted  Filter = "completed"
	FilterFailed     Filter = "failed"
	FilterCancelled  Filter = "cancelled"
)

func (e Filter) ToPointer() *Filter {
	return &e
}
func (e *Filter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "cancelled":
		*e = Filter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Filter: %v", v)
	}
}

type ListFilesInVectorStoreBatchRequest struct {
	// The ID of the vector store that the files belong to.
	VectorStoreID string `pathParam:"style=simple,explode=false,name=vector_store_id"`
	// The ID of the file batch that the files belong to.
	BatchID string `pathParam:"style=simple,explode=false,name=batch_id"`
	// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	//
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	//
	Order *ListFilesInVectorStoreBatchQueryParamOrder `default:"desc" queryParam:"style=form,explode=true,name=order"`
	// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	//
	After *string `queryParam:"style=form,explode=true,name=after"`
	// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	//
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
	Filter *Filter `queryParam:"style=form,explode=true,name=filter"`
}

func (l ListFilesInVectorStoreBatchRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListFilesInVectorStoreBatchRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListFilesInVectorStoreBatchRequest) GetVectorStoreID() string {
	if o == nil {
		return ""
	}
	return o.VectorStoreID
}

func (o *ListFilesInVectorStoreBatchRequest) GetBatchID() string {
	if o == nil {
		return ""
	}
	return o.BatchID
}

func (o *ListFilesInVectorStoreBatchRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListFilesInVectorStoreBatchRequest) GetOrder() *ListFilesInVectorStoreBatchQueryParamOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListFilesInVectorStoreBatchRequest) GetAfter() *string {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ListFilesInVectorStoreBatchRequest) GetBefore() *string {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *ListFilesInVectorStoreBatchRequest) GetFilter() *Filter {
	if o == nil {
		return nil
	}
	return o.Filter
}

type ListFilesInVectorStoreBatchResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListVectorStoreFilesResponse *components.ListVectorStoreFilesResponse
}

func (o *ListFilesInVectorStoreBatchResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListFilesInVectorStoreBatchResponse) GetListVectorStoreFilesResponse() *components.ListVectorStoreFilesResponse {
	if o == nil {
		return nil
	}
	return o.ListVectorStoreFilesResponse
}
