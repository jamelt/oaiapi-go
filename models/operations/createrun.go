// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/jamelt/openai-api/models/components"
)

type Include string

const (
	IncludeStepDetailsToolCallsWildcardFileSearchResultsWildcardContent Include = "step_details.tool_calls[*].file_search.results[*].content"
)

func (e Include) ToPointer() *Include {
	return &e
}
func (e *Include) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "step_details.tool_calls[*].file_search.results[*].content":
		*e = Include(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Include: %v", v)
	}
}

type CreateRunRequest struct {
	// The ID of the thread to run.
	ThreadID string `pathParam:"style=simple,explode=false,name=thread_id"`
	// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
	//
	// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
	//
	Include          []Include                   `queryParam:"style=form,explode=true,name=include[]"`
	CreateRunRequest components.CreateRunRequest `request:"mediaType=application/json"`
}

func (o *CreateRunRequest) GetThreadID() string {
	if o == nil {
		return ""
	}
	return o.ThreadID
}

func (o *CreateRunRequest) GetInclude() []Include {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *CreateRunRequest) GetCreateRunRequest() components.CreateRunRequest {
	if o == nil {
		return components.CreateRunRequest{}
	}
	return o.CreateRunRequest
}

type CreateRunResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	RunObject *components.RunObject
}

func (o *CreateRunResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateRunResponse) GetRunObject() *components.RunObject {
	if o == nil {
		return nil
	}
	return o.RunObject
}
