// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/jamelt/openai-api/internal/utils"
	"github.com/jamelt/openai-api/models/components"
)

type CreateTranslationResponseBodyType string

const (
	CreateTranslationResponseBodyTypeCreateTranslationResponseJSON        CreateTranslationResponseBodyType = "CreateTranslationResponseJson"
	CreateTranslationResponseBodyTypeCreateTranslationResponseVerboseJSON CreateTranslationResponseBodyType = "CreateTranslationResponseVerboseJson"
)

// CreateTranslationResponseBody - OK
type CreateTranslationResponseBody struct {
	CreateTranslationResponseJSON        *components.CreateTranslationResponseJSON
	CreateTranslationResponseVerboseJSON *components.CreateTranslationResponseVerboseJSON

	Type CreateTranslationResponseBodyType
}

func CreateCreateTranslationResponseBodyCreateTranslationResponseJSON(createTranslationResponseJSON components.CreateTranslationResponseJSON) CreateTranslationResponseBody {
	typ := CreateTranslationResponseBodyTypeCreateTranslationResponseJSON

	return CreateTranslationResponseBody{
		CreateTranslationResponseJSON: &createTranslationResponseJSON,
		Type:                          typ,
	}
}

func CreateCreateTranslationResponseBodyCreateTranslationResponseVerboseJSON(createTranslationResponseVerboseJSON components.CreateTranslationResponseVerboseJSON) CreateTranslationResponseBody {
	typ := CreateTranslationResponseBodyTypeCreateTranslationResponseVerboseJSON

	return CreateTranslationResponseBody{
		CreateTranslationResponseVerboseJSON: &createTranslationResponseVerboseJSON,
		Type:                                 typ,
	}
}

func (u *CreateTranslationResponseBody) UnmarshalJSON(data []byte) error {

	var createTranslationResponseJSON components.CreateTranslationResponseJSON = components.CreateTranslationResponseJSON{}
	if err := utils.UnmarshalJSON(data, &createTranslationResponseJSON, "", true, true); err == nil {
		u.CreateTranslationResponseJSON = &createTranslationResponseJSON
		u.Type = CreateTranslationResponseBodyTypeCreateTranslationResponseJSON
		return nil
	}

	var createTranslationResponseVerboseJSON components.CreateTranslationResponseVerboseJSON = components.CreateTranslationResponseVerboseJSON{}
	if err := utils.UnmarshalJSON(data, &createTranslationResponseVerboseJSON, "", true, true); err == nil {
		u.CreateTranslationResponseVerboseJSON = &createTranslationResponseVerboseJSON
		u.Type = CreateTranslationResponseBodyTypeCreateTranslationResponseVerboseJSON
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateTranslationResponseBody", string(data))
}

func (u CreateTranslationResponseBody) MarshalJSON() ([]byte, error) {
	if u.CreateTranslationResponseJSON != nil {
		return utils.MarshalJSON(u.CreateTranslationResponseJSON, "", true)
	}

	if u.CreateTranslationResponseVerboseJSON != nil {
		return utils.MarshalJSON(u.CreateTranslationResponseVerboseJSON, "", true)
	}

	return nil, errors.New("could not marshal union type CreateTranslationResponseBody: all fields are null")
}

type CreateTranslationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	OneOf *CreateTranslationResponseBody
}

func (o *CreateTranslationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateTranslationResponse) GetOneOf() *CreateTranslationResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
