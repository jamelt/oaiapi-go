// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/jamelt/openai-api/internal/utils"
	"github.com/jamelt/openai-api/models/components"
)

// EffectiveAt - Return only events whose `effective_at` (Unix seconds) is in this range.
type EffectiveAt struct {
	// Return only events whose `effective_at` (Unix seconds) is greater than this value.
	Gt *int64 `queryParam:"name=gt"`
	// Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
	Gte *int64 `queryParam:"name=gte"`
	// Return only events whose `effective_at` (Unix seconds) is less than this value.
	Lt *int64 `queryParam:"name=lt"`
	// Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
	Lte *int64 `queryParam:"name=lte"`
}

func (o *EffectiveAt) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *EffectiveAt) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *EffectiveAt) GetLt() *int64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *EffectiveAt) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type ListAuditLogsRequest struct {
	// Return only events whose `effective_at` (Unix seconds) is in this range.
	EffectiveAt *EffectiveAt `queryParam:"style=form,explode=true,name=effective_at"`
	// Return only events for these projects.
	ProjectIds []string `queryParam:"style=form,explode=true,name=project_ids[]"`
	// Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
	EventTypes []components.AuditLogEventType `queryParam:"style=form,explode=true,name=event_types[]"`
	// Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
	ActorIds []string `queryParam:"style=form,explode=true,name=actor_ids[]"`
	// Return only events performed by users with these emails.
	ActorEmails []string `queryParam:"style=form,explode=true,name=actor_emails[]"`
	// Return only events performed on these targets. For example, a project ID updated.
	ResourceIds []string `queryParam:"style=form,explode=true,name=resource_ids[]"`
	// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	//
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	//
	After *string `queryParam:"style=form,explode=true,name=after"`
	// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	//
	Before *string `queryParam:"style=form,explode=true,name=before"`
}

func (l ListAuditLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAuditLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAuditLogsRequest) GetEffectiveAt() *EffectiveAt {
	if o == nil {
		return nil
	}
	return o.EffectiveAt
}

func (o *ListAuditLogsRequest) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *ListAuditLogsRequest) GetEventTypes() []components.AuditLogEventType {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *ListAuditLogsRequest) GetActorIds() []string {
	if o == nil {
		return nil
	}
	return o.ActorIds
}

func (o *ListAuditLogsRequest) GetActorEmails() []string {
	if o == nil {
		return nil
	}
	return o.ActorEmails
}

func (o *ListAuditLogsRequest) GetResourceIds() []string {
	if o == nil {
		return nil
	}
	return o.ResourceIds
}

func (o *ListAuditLogsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAuditLogsRequest) GetAfter() *string {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ListAuditLogsRequest) GetBefore() *string {
	if o == nil {
		return nil
	}
	return o.Before
}

type ListAuditLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Audit logs listed successfully.
	ListAuditLogsResponse *components.ListAuditLogsResponse
}

func (o *ListAuditLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAuditLogsResponse) GetListAuditLogsResponse() *components.ListAuditLogsResponse {
	if o == nil {
		return nil
	}
	return o.ListAuditLogsResponse
}
